package one.transfinite.naac.student;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;

import one.transfinite.naac.course.Course;
import one.transfinite.naac.department.Department;
import one.transfinite.naac.hod.Hod;
import one.transfinite.naac.program.FacultyProgram;
import one.transfinite.naac.program.FacultySeminar;
import one.transfinite.naac.program.Program;
import one.transfinite.naac.publication.BookPublication;
import one.transfinite.naac.publication.PaperPresented;
import one.transfinite.naac.publication.ResearchPublication;
import one.transfinite.naac.qualification.EntranceQualification;
import one.transfinite.naac.qualification.PGQualification;
import one.transfinite.naac.qualification.ResearchQualification;
import one.transfinite.naac.qualification.UGQualification;
import one.transfinite.naac.role.Role;
import one.transfinite.naac.role.RoleName;
import one.transfinite.naac.teacher.Teacher;
import one.transfinite.naac.teacher.TeacherAppointment;
import one.transfinite.naac.teacher.TeacherApproval;
import one.transfinite.naac.teacher.TeacherTransfer;
import one.transfinite.naac.user.User;
import org.junit.jupiter.api.Test;

class AdmittedStudentTest {
    @Test
    void testConstructor() {
        AdmittedStudent actualAdmittedStudent = new AdmittedStudent();
        actualAdmittedStudent.setCategory("Category");
        actualAdmittedStudent.setId(123L);
        Department department = new Department();
        department.setId(123L);
        department.setDepartmentName("Department Name");
        department.setPrograms(new ArrayList<Program>());
        department.setEstablishmentYear("Establishment Year");
        Program program = new Program();
        program.setProgramCode("Program Code");
        program.setProgramName("Program Name");
        program.setCourses(new ArrayList<Course>());
        program.setProgramId(123L);
        program.setStartYear("Start Year");
        program.setAdmittedStudents(new ArrayList<AdmittedStudent>());
        program.setDepartment(department);
        program.setProgramType("Program Type");
        actualAdmittedStudent.setProgram(program);
        actualAdmittedStudent.setStudentClass("Student Class");
        ResearchQualification researchQualification = new ResearchQualification();
        researchQualification.setSubject("Hello from the Dreaming Spires");
        researchQualification.setUniversity("University");
        researchQualification.setId(123L);
        researchQualification.setDegree("Degree");
        LocalDateTime atStartOfDayResult = LocalDate.of(1970, 1, 1).atStartOfDay();
        researchQualification.setDateOfDeclaration(Date.from(atStartOfDayResult.atZone(ZoneId.of("UTC")).toInstant()));
        Hod hod = new Hod();
        hod.setResearchQualification(new ResearchQualification());
        hod.setUser(new User());
        hod.setTeacherApprovals(new ArrayList<TeacherApproval>());
        hod.setEntranceQualification(new EntranceQualification());
        hod.setPanDocument("Pan Document");
        hod.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        hod.setBookPublications(new ArrayList<BookPublication>());
        hod.setResearchPublications(new ArrayList<ResearchPublication>());
        hod.setPaperPresentedList(new ArrayList<PaperPresented>());
        hod.setAadharDocument("Aadhar Document");
        hod.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        hod.setId(123L);
        hod.setUgQualification(new UGQualification());
        hod.setPanNumber("42");
        hod.setAadharNumber("42");
        hod.setPgQualification(new PGQualification());
        Role role = new Role();
        role.setRoleName(RoleName.Admin);
        role.setId(123L);
        Teacher teacher = new Teacher();
        teacher.setResearchQualification(new ResearchQualification());
        teacher.setFacultyPrograms(new ArrayList<FacultyProgram>());
        teacher.setUser(new User());
        teacher.setTeacherApprovals(new ArrayList<TeacherApproval>());
        teacher.setEntranceQualification(new EntranceQualification());
        teacher.setPanDocument("Pan Document");
        teacher.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        teacher.setBookPublications(new ArrayList<BookPublication>());
        teacher.setResearchPublications(new ArrayList<ResearchPublication>());
        teacher.setTeacherId(123L);
        teacher.setPaperPresentedList(new ArrayList<PaperPresented>());
        teacher.setAadharDocument("Aadhar Document");
        teacher.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        teacher.setUgQualification(new UGQualification());
        teacher.setPanNumber("42");
        teacher.setAadharNumber("42");
        teacher.setFacultySeminars(new ArrayList<FacultySeminar>());
        teacher.setPgQualification(new PGQualification());
        Student student = new Student();
        student.setProgram(new Program());
        student.setFatherName("Father Name");
        student.setReligion("Religion");
        student.setUser(new User());
        student.setPanDocument("Pan Document");
        student.setTenthMarks(10.0);
        student.setTwelthMarks(10.0);
        student.setStudentId(123L);
        student.setMotherName("Mother Name");
        student.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult1 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student.setStartDate(Date.from(atStartOfDayResult1.atZone(ZoneId.of("UTC")).toInstant()));
        student.setAadharDocument("Aadhar Document");
        student.setPanNumber("42");
        student.setAadharNumber("42");
        LocalDateTime atStartOfDayResult2 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student.setCompletionDate(Date.from(atStartOfDayResult2.atZone(ZoneId.of("UTC")).toInstant()));
        student.setMotherPhoneNumber("4105551212");
        student.setCast("Cast");
        User user = new User();
        user.setLastName("Doe");
        user.setEmail("jane.doe@example.org");
        user.setPassword("iloveyou");
        user.setHod(hod);
        user.setRole(role);
        user.setUserId(123L);
        LocalDateTime atStartOfDayResult3 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user.setCreatedAt(Date.from(atStartOfDayResult3.atZone(ZoneId.of("UTC")).toInstant()));
        user.setMiddleName("Middle Name");
        user.setFirstName("Jane");
        LocalDateTime atStartOfDayResult4 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user.setDob(Date.from(atStartOfDayResult4.atZone(ZoneId.of("UTC")).toInstant()));
        user.setTeacher(teacher);
        user.setGender("Gender");
        user.setStudent(student);
        user.setPhone("4105551212");
        EntranceQualification entranceQualification = new EntranceQualification();
        entranceQualification.setSubject("Hello from the Dreaming Spires");
        entranceQualification.setUniversity("University");
        entranceQualification.setId(123L);
        entranceQualification.setName("Name");
        LocalDateTime atStartOfDayResult5 = LocalDate.of(1970, 1, 1).atStartOfDay();
        entranceQualification.setYearOfPassing(Date.from(atStartOfDayResult5.atZone(ZoneId.of("UTC")).toInstant()));
        UGQualification ugQualification = new UGQualification();
        ugQualification.setDocument("Document");
        ugQualification.setUniversity("University");
        ugQualification.setSpecialization("Specialization");
        ugQualification.setId(123L);
        ugQualification.setDegree("Degree");
        ugQualification.setGrade("Grade");
        LocalDateTime atStartOfDayResult6 = LocalDate.of(1970, 1, 1).atStartOfDay();
        ugQualification.setYearOfPassing(Date.from(atStartOfDayResult6.atZone(ZoneId.of("UTC")).toInstant()));
        PGQualification pgQualification = new PGQualification();
        pgQualification.setDocument("Document");
        pgQualification.setUniversity("University");
        pgQualification.setSpecialization("Specialization");
        pgQualification.setId(123L);
        pgQualification.setDegree("Degree");
        pgQualification.setGrade("Grade");
        LocalDateTime atStartOfDayResult7 = LocalDate.of(1970, 1, 1).atStartOfDay();
        pgQualification.setYearOfPassing(Date.from(atStartOfDayResult7.atZone(ZoneId.of("UTC")).toInstant()));
        Hod hod1 = new Hod();
        hod1.setResearchQualification(researchQualification);
        hod1.setUser(user);
        hod1.setTeacherApprovals(new ArrayList<TeacherApproval>());
        hod1.setEntranceQualification(entranceQualification);
        hod1.setPanDocument("Pan Document");
        hod1.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        hod1.setBookPublications(new ArrayList<BookPublication>());
        hod1.setResearchPublications(new ArrayList<ResearchPublication>());
        hod1.setPaperPresentedList(new ArrayList<PaperPresented>());
        hod1.setAadharDocument("Aadhar Document");
        hod1.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        hod1.setId(123L);
        hod1.setUgQualification(ugQualification);
        hod1.setPanNumber("42");
        hod1.setAadharNumber("42");
        hod1.setPgQualification(pgQualification);
        Role role1 = new Role();
        role1.setRoleName(RoleName.Admin);
        role1.setId(123L);
        ResearchQualification researchQualification1 = new ResearchQualification();
        researchQualification1.setSubject("Hello from the Dreaming Spires");
        researchQualification1.setUniversity("University");
        researchQualification1.setId(123L);
        researchQualification1.setDegree("Degree");
        LocalDateTime atStartOfDayResult8 = LocalDate.of(1970, 1, 1).atStartOfDay();
        researchQualification1.setDateOfDeclaration(Date.from(atStartOfDayResult8.atZone(ZoneId.of("UTC")).toInstant()));
        Hod hod2 = new Hod();
        hod2.setResearchQualification(new ResearchQualification());
        hod2.setUser(new User());
        hod2.setTeacherApprovals(new ArrayList<TeacherApproval>());
        hod2.setEntranceQualification(new EntranceQualification());
        hod2.setPanDocument("Pan Document");
        hod2.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        hod2.setBookPublications(new ArrayList<BookPublication>());
        hod2.setResearchPublications(new ArrayList<ResearchPublication>());
        hod2.setPaperPresentedList(new ArrayList<PaperPresented>());
        hod2.setAadharDocument("Aadhar Document");
        hod2.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        hod2.setId(123L);
        hod2.setUgQualification(new UGQualification());
        hod2.setPanNumber("42");
        hod2.setAadharNumber("42");
        hod2.setPgQualification(new PGQualification());
        Role role2 = new Role();
        role2.setRoleName(RoleName.Admin);
        role2.setId(123L);
        Teacher teacher1 = new Teacher();
        teacher1.setResearchQualification(new ResearchQualification());
        teacher1.setFacultyPrograms(new ArrayList<FacultyProgram>());
        teacher1.setUser(new User());
        teacher1.setTeacherApprovals(new ArrayList<TeacherApproval>());
        teacher1.setEntranceQualification(new EntranceQualification());
        teacher1.setPanDocument("Pan Document");
        teacher1.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        teacher1.setBookPublications(new ArrayList<BookPublication>());
        teacher1.setResearchPublications(new ArrayList<ResearchPublication>());
        teacher1.setTeacherId(123L);
        teacher1.setPaperPresentedList(new ArrayList<PaperPresented>());
        teacher1.setAadharDocument("Aadhar Document");
        teacher1.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        teacher1.setUgQualification(new UGQualification());
        teacher1.setPanNumber("42");
        teacher1.setAadharNumber("42");
        teacher1.setFacultySeminars(new ArrayList<FacultySeminar>());
        teacher1.setPgQualification(new PGQualification());
        Student student1 = new Student();
        student1.setProgram(new Program());
        student1.setFatherName("Father Name");
        student1.setReligion("Religion");
        student1.setUser(new User());
        student1.setPanDocument("Pan Document");
        student1.setTenthMarks(10.0);
        student1.setTwelthMarks(10.0);
        student1.setStudentId(123L);
        student1.setMotherName("Mother Name");
        student1.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult9 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student1.setStartDate(Date.from(atStartOfDayResult9.atZone(ZoneId.of("UTC")).toInstant()));
        student1.setAadharDocument("Aadhar Document");
        student1.setPanNumber("42");
        student1.setAadharNumber("42");
        LocalDateTime atStartOfDayResult10 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student1.setCompletionDate(Date.from(atStartOfDayResult10.atZone(ZoneId.of("UTC")).toInstant()));
        student1.setMotherPhoneNumber("4105551212");
        student1.setCast("Cast");
        User user1 = new User();
        user1.setLastName("Doe");
        user1.setEmail("jane.doe@example.org");
        user1.setPassword("iloveyou");
        user1.setHod(hod2);
        user1.setRole(role2);
        user1.setUserId(123L);
        LocalDateTime atStartOfDayResult11 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user1.setCreatedAt(Date.from(atStartOfDayResult11.atZone(ZoneId.of("UTC")).toInstant()));
        user1.setMiddleName("Middle Name");
        user1.setFirstName("Jane");
        LocalDateTime atStartOfDayResult12 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user1.setDob(Date.from(atStartOfDayResult12.atZone(ZoneId.of("UTC")).toInstant()));
        user1.setTeacher(teacher1);
        user1.setGender("Gender");
        user1.setStudent(student1);
        user1.setPhone("4105551212");
        EntranceQualification entranceQualification1 = new EntranceQualification();
        entranceQualification1.setSubject("Hello from the Dreaming Spires");
        entranceQualification1.setUniversity("University");
        entranceQualification1.setId(123L);
        entranceQualification1.setName("Name");
        LocalDateTime atStartOfDayResult13 = LocalDate.of(1970, 1, 1).atStartOfDay();
        entranceQualification1.setYearOfPassing(Date.from(atStartOfDayResult13.atZone(ZoneId.of("UTC")).toInstant()));
        UGQualification ugQualification1 = new UGQualification();
        ugQualification1.setDocument("Document");
        ugQualification1.setUniversity("University");
        ugQualification1.setSpecialization("Specialization");
        ugQualification1.setId(123L);
        ugQualification1.setDegree("Degree");
        ugQualification1.setGrade("Grade");
        LocalDateTime atStartOfDayResult14 = LocalDate.of(1970, 1, 1).atStartOfDay();
        ugQualification1.setYearOfPassing(Date.from(atStartOfDayResult14.atZone(ZoneId.of("UTC")).toInstant()));
        PGQualification pgQualification1 = new PGQualification();
        pgQualification1.setDocument("Document");
        pgQualification1.setUniversity("University");
        pgQualification1.setSpecialization("Specialization");
        pgQualification1.setId(123L);
        pgQualification1.setDegree("Degree");
        pgQualification1.setGrade("Grade");
        LocalDateTime atStartOfDayResult15 = LocalDate.of(1970, 1, 1).atStartOfDay();
        pgQualification1.setYearOfPassing(Date.from(atStartOfDayResult15.atZone(ZoneId.of("UTC")).toInstant()));
        Teacher teacher2 = new Teacher();
        teacher2.setResearchQualification(researchQualification1);
        teacher2.setFacultyPrograms(new ArrayList<FacultyProgram>());
        teacher2.setUser(user1);
        teacher2.setTeacherApprovals(new ArrayList<TeacherApproval>());
        teacher2.setEntranceQualification(entranceQualification1);
        teacher2.setPanDocument("Pan Document");
        teacher2.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        teacher2.setBookPublications(new ArrayList<BookPublication>());
        teacher2.setResearchPublications(new ArrayList<ResearchPublication>());
        teacher2.setTeacherId(123L);
        teacher2.setPaperPresentedList(new ArrayList<PaperPresented>());
        teacher2.setAadharDocument("Aadhar Document");
        teacher2.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        teacher2.setUgQualification(ugQualification1);
        teacher2.setPanNumber("42");
        teacher2.setAadharNumber("42");
        teacher2.setFacultySeminars(new ArrayList<FacultySeminar>());
        teacher2.setPgQualification(pgQualification1);
        Department department1 = new Department();
        department1.setId(123L);
        department1.setDepartmentName("Department Name");
        department1.setPrograms(new ArrayList<Program>());
        department1.setEstablishmentYear("Establishment Year");
        Program program1 = new Program();
        program1.setProgramCode("Program Code");
        program1.setProgramName("Program Name");
        program1.setCourses(new ArrayList<Course>());
        program1.setProgramId(123L);
        program1.setStartYear("Start Year");
        program1.setAdmittedStudents(new ArrayList<AdmittedStudent>());
        program1.setDepartment(department1);
        program1.setProgramType("Program Type");
        Hod hod3 = new Hod();
        hod3.setResearchQualification(new ResearchQualification());
        hod3.setUser(new User());
        hod3.setTeacherApprovals(new ArrayList<TeacherApproval>());
        hod3.setEntranceQualification(new EntranceQualification());
        hod3.setPanDocument("Pan Document");
        hod3.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        hod3.setBookPublications(new ArrayList<BookPublication>());
        hod3.setResearchPublications(new ArrayList<ResearchPublication>());
        hod3.setPaperPresentedList(new ArrayList<PaperPresented>());
        hod3.setAadharDocument("Aadhar Document");
        hod3.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        hod3.setId(123L);
        hod3.setUgQualification(new UGQualification());
        hod3.setPanNumber("42");
        hod3.setAadharNumber("42");
        hod3.setPgQualification(new PGQualification());
        Role role3 = new Role();
        role3.setRoleName(RoleName.Admin);
        role3.setId(123L);
        Teacher teacher3 = new Teacher();
        teacher3.setResearchQualification(new ResearchQualification());
        teacher3.setFacultyPrograms(new ArrayList<FacultyProgram>());
        teacher3.setUser(new User());
        teacher3.setTeacherApprovals(new ArrayList<TeacherApproval>());
        teacher3.setEntranceQualification(new EntranceQualification());
        teacher3.setPanDocument("Pan Document");
        teacher3.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        teacher3.setBookPublications(new ArrayList<BookPublication>());
        teacher3.setResearchPublications(new ArrayList<ResearchPublication>());
        teacher3.setTeacherId(123L);
        teacher3.setPaperPresentedList(new ArrayList<PaperPresented>());
        teacher3.setAadharDocument("Aadhar Document");
        teacher3.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        teacher3.setUgQualification(new UGQualification());
        teacher3.setPanNumber("42");
        teacher3.setAadharNumber("42");
        teacher3.setFacultySeminars(new ArrayList<FacultySeminar>());
        teacher3.setPgQualification(new PGQualification());
        Student student2 = new Student();
        student2.setProgram(new Program());
        student2.setFatherName("Father Name");
        student2.setReligion("Religion");
        student2.setUser(new User());
        student2.setPanDocument("Pan Document");
        student2.setTenthMarks(10.0);
        student2.setTwelthMarks(10.0);
        student2.setStudentId(123L);
        student2.setMotherName("Mother Name");
        student2.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult16 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student2.setStartDate(Date.from(atStartOfDayResult16.atZone(ZoneId.of("UTC")).toInstant()));
        student2.setAadharDocument("Aadhar Document");
        student2.setPanNumber("42");
        student2.setAadharNumber("42");
        LocalDateTime atStartOfDayResult17 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student2.setCompletionDate(Date.from(atStartOfDayResult17.atZone(ZoneId.of("UTC")).toInstant()));
        student2.setMotherPhoneNumber("4105551212");
        student2.setCast("Cast");
        User user2 = new User();
        user2.setLastName("Doe");
        user2.setEmail("jane.doe@example.org");
        user2.setPassword("iloveyou");
        user2.setHod(hod3);
        user2.setRole(role3);
        user2.setUserId(123L);
        LocalDateTime atStartOfDayResult18 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user2.setCreatedAt(Date.from(atStartOfDayResult18.atZone(ZoneId.of("UTC")).toInstant()));
        user2.setMiddleName("Middle Name");
        user2.setFirstName("Jane");
        LocalDateTime atStartOfDayResult19 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user2.setDob(Date.from(atStartOfDayResult19.atZone(ZoneId.of("UTC")).toInstant()));
        user2.setTeacher(teacher3);
        user2.setGender("Gender");
        user2.setStudent(student2);
        user2.setPhone("4105551212");
        Student student3 = new Student();
        student3.setProgram(program1);
        student3.setFatherName("Father Name");
        student3.setReligion("Religion");
        student3.setUser(user2);
        student3.setPanDocument("Pan Document");
        student3.setTenthMarks(10.0);
        student3.setTwelthMarks(10.0);
        student3.setStudentId(123L);
        student3.setMotherName("Mother Name");
        student3.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult20 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student3.setStartDate(Date.from(atStartOfDayResult20.atZone(ZoneId.of("UTC")).toInstant()));
        student3.setAadharDocument("Aadhar Document");
        student3.setPanNumber("42");
        student3.setAadharNumber("42");
        LocalDateTime atStartOfDayResult21 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student3.setCompletionDate(Date.from(atStartOfDayResult21.atZone(ZoneId.of("UTC")).toInstant()));
        student3.setMotherPhoneNumber("4105551212");
        student3.setCast("Cast");
        User user3 = new User();
        user3.setLastName("Doe");
        user3.setEmail("jane.doe@example.org");
        user3.setPassword("iloveyou");
        user3.setHod(hod1);
        user3.setRole(role1);
        user3.setUserId(123L);
        LocalDateTime atStartOfDayResult22 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user3.setCreatedAt(Date.from(atStartOfDayResult22.atZone(ZoneId.of("UTC")).toInstant()));
        user3.setMiddleName("Middle Name");
        user3.setFirstName("Jane");
        LocalDateTime atStartOfDayResult23 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user3.setDob(Date.from(atStartOfDayResult23.atZone(ZoneId.of("UTC")).toInstant()));
        user3.setTeacher(teacher2);
        user3.setGender("Gender");
        user3.setStudent(student3);
        user3.setPhone("4105551212");
        actualAdmittedStudent.setUser(user3);
        assertEquals("Category", actualAdmittedStudent.getCategory());
        assertEquals(123L, actualAdmittedStudent.getId().longValue());
        assertSame(program, actualAdmittedStudent.getProgram());
        assertEquals("Student Class", actualAdmittedStudent.getStudentClass());
        assertSame(user3, actualAdmittedStudent.getUser());
    }

    @Test
    void testConstructor2() {
        Program program = new Program();
        AdmittedStudent actualAdmittedStudent = new AdmittedStudent(123L, program, new User(), "Student Class", "Category");
        actualAdmittedStudent.setCategory("Category");
        actualAdmittedStudent.setId(123L);
        Department department = new Department();
        department.setId(123L);
        department.setDepartmentName("Department Name");
        department.setPrograms(new ArrayList<Program>());
        department.setEstablishmentYear("Establishment Year");
        Program program1 = new Program();
        program1.setProgramCode("Program Code");
        program1.setProgramName("Program Name");
        program1.setCourses(new ArrayList<Course>());
        program1.setProgramId(123L);
        program1.setStartYear("Start Year");
        program1.setAdmittedStudents(new ArrayList<AdmittedStudent>());
        program1.setDepartment(department);
        program1.setProgramType("Program Type");
        actualAdmittedStudent.setProgram(program1);
        actualAdmittedStudent.setStudentClass("Student Class");
        ResearchQualification researchQualification = new ResearchQualification();
        researchQualification.setSubject("Hello from the Dreaming Spires");
        researchQualification.setUniversity("University");
        researchQualification.setId(123L);
        researchQualification.setDegree("Degree");
        LocalDateTime atStartOfDayResult = LocalDate.of(1970, 1, 1).atStartOfDay();
        researchQualification.setDateOfDeclaration(Date.from(atStartOfDayResult.atZone(ZoneId.of("UTC")).toInstant()));
        Hod hod = new Hod();
        hod.setResearchQualification(new ResearchQualification());
        hod.setUser(new User());
        hod.setTeacherApprovals(new ArrayList<TeacherApproval>());
        hod.setEntranceQualification(new EntranceQualification());
        hod.setPanDocument("Pan Document");
        hod.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        hod.setBookPublications(new ArrayList<BookPublication>());
        hod.setResearchPublications(new ArrayList<ResearchPublication>());
        hod.setPaperPresentedList(new ArrayList<PaperPresented>());
        hod.setAadharDocument("Aadhar Document");
        hod.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        hod.setId(123L);
        hod.setUgQualification(new UGQualification());
        hod.setPanNumber("42");
        hod.setAadharNumber("42");
        hod.setPgQualification(new PGQualification());
        Role role = new Role();
        role.setRoleName(RoleName.Admin);
        role.setId(123L);
        Teacher teacher = new Teacher();
        teacher.setResearchQualification(new ResearchQualification());
        teacher.setFacultyPrograms(new ArrayList<FacultyProgram>());
        teacher.setUser(new User());
        teacher.setTeacherApprovals(new ArrayList<TeacherApproval>());
        teacher.setEntranceQualification(new EntranceQualification());
        teacher.setPanDocument("Pan Document");
        teacher.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        teacher.setBookPublications(new ArrayList<BookPublication>());
        teacher.setResearchPublications(new ArrayList<ResearchPublication>());
        teacher.setTeacherId(123L);
        teacher.setPaperPresentedList(new ArrayList<PaperPresented>());
        teacher.setAadharDocument("Aadhar Document");
        teacher.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        teacher.setUgQualification(new UGQualification());
        teacher.setPanNumber("42");
        teacher.setAadharNumber("42");
        teacher.setFacultySeminars(new ArrayList<FacultySeminar>());
        teacher.setPgQualification(new PGQualification());
        Student student = new Student();
        student.setProgram(new Program());
        student.setFatherName("Father Name");
        student.setReligion("Religion");
        student.setUser(new User());
        student.setPanDocument("Pan Document");
        student.setTenthMarks(10.0);
        student.setTwelthMarks(10.0);
        student.setStudentId(123L);
        student.setMotherName("Mother Name");
        student.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult1 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student.setStartDate(Date.from(atStartOfDayResult1.atZone(ZoneId.of("UTC")).toInstant()));
        student.setAadharDocument("Aadhar Document");
        student.setPanNumber("42");
        student.setAadharNumber("42");
        LocalDateTime atStartOfDayResult2 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student.setCompletionDate(Date.from(atStartOfDayResult2.atZone(ZoneId.of("UTC")).toInstant()));
        student.setMotherPhoneNumber("4105551212");
        student.setCast("Cast");
        User user = new User();
        user.setLastName("Doe");
        user.setEmail("jane.doe@example.org");
        user.setPassword("iloveyou");
        user.setHod(hod);
        user.setRole(role);
        user.setUserId(123L);
        LocalDateTime atStartOfDayResult3 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user.setCreatedAt(Date.from(atStartOfDayResult3.atZone(ZoneId.of("UTC")).toInstant()));
        user.setMiddleName("Middle Name");
        user.setFirstName("Jane");
        LocalDateTime atStartOfDayResult4 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user.setDob(Date.from(atStartOfDayResult4.atZone(ZoneId.of("UTC")).toInstant()));
        user.setTeacher(teacher);
        user.setGender("Gender");
        user.setStudent(student);
        user.setPhone("4105551212");
        EntranceQualification entranceQualification = new EntranceQualification();
        entranceQualification.setSubject("Hello from the Dreaming Spires");
        entranceQualification.setUniversity("University");
        entranceQualification.setId(123L);
        entranceQualification.setName("Name");
        LocalDateTime atStartOfDayResult5 = LocalDate.of(1970, 1, 1).atStartOfDay();
        entranceQualification.setYearOfPassing(Date.from(atStartOfDayResult5.atZone(ZoneId.of("UTC")).toInstant()));
        UGQualification ugQualification = new UGQualification();
        ugQualification.setDocument("Document");
        ugQualification.setUniversity("University");
        ugQualification.setSpecialization("Specialization");
        ugQualification.setId(123L);
        ugQualification.setDegree("Degree");
        ugQualification.setGrade("Grade");
        LocalDateTime atStartOfDayResult6 = LocalDate.of(1970, 1, 1).atStartOfDay();
        ugQualification.setYearOfPassing(Date.from(atStartOfDayResult6.atZone(ZoneId.of("UTC")).toInstant()));
        PGQualification pgQualification = new PGQualification();
        pgQualification.setDocument("Document");
        pgQualification.setUniversity("University");
        pgQualification.setSpecialization("Specialization");
        pgQualification.setId(123L);
        pgQualification.setDegree("Degree");
        pgQualification.setGrade("Grade");
        LocalDateTime atStartOfDayResult7 = LocalDate.of(1970, 1, 1).atStartOfDay();
        pgQualification.setYearOfPassing(Date.from(atStartOfDayResult7.atZone(ZoneId.of("UTC")).toInstant()));
        Hod hod1 = new Hod();
        hod1.setResearchQualification(researchQualification);
        hod1.setUser(user);
        hod1.setTeacherApprovals(new ArrayList<TeacherApproval>());
        hod1.setEntranceQualification(entranceQualification);
        hod1.setPanDocument("Pan Document");
        hod1.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        hod1.setBookPublications(new ArrayList<BookPublication>());
        hod1.setResearchPublications(new ArrayList<ResearchPublication>());
        hod1.setPaperPresentedList(new ArrayList<PaperPresented>());
        hod1.setAadharDocument("Aadhar Document");
        hod1.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        hod1.setId(123L);
        hod1.setUgQualification(ugQualification);
        hod1.setPanNumber("42");
        hod1.setAadharNumber("42");
        hod1.setPgQualification(pgQualification);
        Role role1 = new Role();
        role1.setRoleName(RoleName.Admin);
        role1.setId(123L);
        ResearchQualification researchQualification1 = new ResearchQualification();
        researchQualification1.setSubject("Hello from the Dreaming Spires");
        researchQualification1.setUniversity("University");
        researchQualification1.setId(123L);
        researchQualification1.setDegree("Degree");
        LocalDateTime atStartOfDayResult8 = LocalDate.of(1970, 1, 1).atStartOfDay();
        researchQualification1.setDateOfDeclaration(Date.from(atStartOfDayResult8.atZone(ZoneId.of("UTC")).toInstant()));
        Hod hod2 = new Hod();
        hod2.setResearchQualification(new ResearchQualification());
        hod2.setUser(new User());
        hod2.setTeacherApprovals(new ArrayList<TeacherApproval>());
        hod2.setEntranceQualification(new EntranceQualification());
        hod2.setPanDocument("Pan Document");
        hod2.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        hod2.setBookPublications(new ArrayList<BookPublication>());
        hod2.setResearchPublications(new ArrayList<ResearchPublication>());
        hod2.setPaperPresentedList(new ArrayList<PaperPresented>());
        hod2.setAadharDocument("Aadhar Document");
        hod2.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        hod2.setId(123L);
        hod2.setUgQualification(new UGQualification());
        hod2.setPanNumber("42");
        hod2.setAadharNumber("42");
        hod2.setPgQualification(new PGQualification());
        Role role2 = new Role();
        role2.setRoleName(RoleName.Admin);
        role2.setId(123L);
        Teacher teacher1 = new Teacher();
        teacher1.setResearchQualification(new ResearchQualification());
        teacher1.setFacultyPrograms(new ArrayList<FacultyProgram>());
        teacher1.setUser(new User());
        teacher1.setTeacherApprovals(new ArrayList<TeacherApproval>());
        teacher1.setEntranceQualification(new EntranceQualification());
        teacher1.setPanDocument("Pan Document");
        teacher1.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        teacher1.setBookPublications(new ArrayList<BookPublication>());
        teacher1.setResearchPublications(new ArrayList<ResearchPublication>());
        teacher1.setTeacherId(123L);
        teacher1.setPaperPresentedList(new ArrayList<PaperPresented>());
        teacher1.setAadharDocument("Aadhar Document");
        teacher1.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        teacher1.setUgQualification(new UGQualification());
        teacher1.setPanNumber("42");
        teacher1.setAadharNumber("42");
        teacher1.setFacultySeminars(new ArrayList<FacultySeminar>());
        teacher1.setPgQualification(new PGQualification());
        Student student1 = new Student();
        student1.setProgram(new Program());
        student1.setFatherName("Father Name");
        student1.setReligion("Religion");
        student1.setUser(new User());
        student1.setPanDocument("Pan Document");
        student1.setTenthMarks(10.0);
        student1.setTwelthMarks(10.0);
        student1.setStudentId(123L);
        student1.setMotherName("Mother Name");
        student1.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult9 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student1.setStartDate(Date.from(atStartOfDayResult9.atZone(ZoneId.of("UTC")).toInstant()));
        student1.setAadharDocument("Aadhar Document");
        student1.setPanNumber("42");
        student1.setAadharNumber("42");
        LocalDateTime atStartOfDayResult10 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student1.setCompletionDate(Date.from(atStartOfDayResult10.atZone(ZoneId.of("UTC")).toInstant()));
        student1.setMotherPhoneNumber("4105551212");
        student1.setCast("Cast");
        User user1 = new User();
        user1.setLastName("Doe");
        user1.setEmail("jane.doe@example.org");
        user1.setPassword("iloveyou");
        user1.setHod(hod2);
        user1.setRole(role2);
        user1.setUserId(123L);
        LocalDateTime atStartOfDayResult11 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user1.setCreatedAt(Date.from(atStartOfDayResult11.atZone(ZoneId.of("UTC")).toInstant()));
        user1.setMiddleName("Middle Name");
        user1.setFirstName("Jane");
        LocalDateTime atStartOfDayResult12 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user1.setDob(Date.from(atStartOfDayResult12.atZone(ZoneId.of("UTC")).toInstant()));
        user1.setTeacher(teacher1);
        user1.setGender("Gender");
        user1.setStudent(student1);
        user1.setPhone("4105551212");
        EntranceQualification entranceQualification1 = new EntranceQualification();
        entranceQualification1.setSubject("Hello from the Dreaming Spires");
        entranceQualification1.setUniversity("University");
        entranceQualification1.setId(123L);
        entranceQualification1.setName("Name");
        LocalDateTime atStartOfDayResult13 = LocalDate.of(1970, 1, 1).atStartOfDay();
        entranceQualification1.setYearOfPassing(Date.from(atStartOfDayResult13.atZone(ZoneId.of("UTC")).toInstant()));
        UGQualification ugQualification1 = new UGQualification();
        ugQualification1.setDocument("Document");
        ugQualification1.setUniversity("University");
        ugQualification1.setSpecialization("Specialization");
        ugQualification1.setId(123L);
        ugQualification1.setDegree("Degree");
        ugQualification1.setGrade("Grade");
        LocalDateTime atStartOfDayResult14 = LocalDate.of(1970, 1, 1).atStartOfDay();
        ugQualification1.setYearOfPassing(Date.from(atStartOfDayResult14.atZone(ZoneId.of("UTC")).toInstant()));
        PGQualification pgQualification1 = new PGQualification();
        pgQualification1.setDocument("Document");
        pgQualification1.setUniversity("University");
        pgQualification1.setSpecialization("Specialization");
        pgQualification1.setId(123L);
        pgQualification1.setDegree("Degree");
        pgQualification1.setGrade("Grade");
        LocalDateTime atStartOfDayResult15 = LocalDate.of(1970, 1, 1).atStartOfDay();
        pgQualification1.setYearOfPassing(Date.from(atStartOfDayResult15.atZone(ZoneId.of("UTC")).toInstant()));
        Teacher teacher2 = new Teacher();
        teacher2.setResearchQualification(researchQualification1);
        teacher2.setFacultyPrograms(new ArrayList<FacultyProgram>());
        teacher2.setUser(user1);
        teacher2.setTeacherApprovals(new ArrayList<TeacherApproval>());
        teacher2.setEntranceQualification(entranceQualification1);
        teacher2.setPanDocument("Pan Document");
        teacher2.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        teacher2.setBookPublications(new ArrayList<BookPublication>());
        teacher2.setResearchPublications(new ArrayList<ResearchPublication>());
        teacher2.setTeacherId(123L);
        teacher2.setPaperPresentedList(new ArrayList<PaperPresented>());
        teacher2.setAadharDocument("Aadhar Document");
        teacher2.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        teacher2.setUgQualification(ugQualification1);
        teacher2.setPanNumber("42");
        teacher2.setAadharNumber("42");
        teacher2.setFacultySeminars(new ArrayList<FacultySeminar>());
        teacher2.setPgQualification(pgQualification1);
        Department department1 = new Department();
        department1.setId(123L);
        department1.setDepartmentName("Department Name");
        department1.setPrograms(new ArrayList<Program>());
        department1.setEstablishmentYear("Establishment Year");
        Program program2 = new Program();
        program2.setProgramCode("Program Code");
        program2.setProgramName("Program Name");
        program2.setCourses(new ArrayList<Course>());
        program2.setProgramId(123L);
        program2.setStartYear("Start Year");
        program2.setAdmittedStudents(new ArrayList<AdmittedStudent>());
        program2.setDepartment(department1);
        program2.setProgramType("Program Type");
        Hod hod3 = new Hod();
        hod3.setResearchQualification(new ResearchQualification());
        hod3.setUser(new User());
        hod3.setTeacherApprovals(new ArrayList<TeacherApproval>());
        hod3.setEntranceQualification(new EntranceQualification());
        hod3.setPanDocument("Pan Document");
        hod3.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        hod3.setBookPublications(new ArrayList<BookPublication>());
        hod3.setResearchPublications(new ArrayList<ResearchPublication>());
        hod3.setPaperPresentedList(new ArrayList<PaperPresented>());
        hod3.setAadharDocument("Aadhar Document");
        hod3.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        hod3.setId(123L);
        hod3.setUgQualification(new UGQualification());
        hod3.setPanNumber("42");
        hod3.setAadharNumber("42");
        hod3.setPgQualification(new PGQualification());
        Role role3 = new Role();
        role3.setRoleName(RoleName.Admin);
        role3.setId(123L);
        Teacher teacher3 = new Teacher();
        teacher3.setResearchQualification(new ResearchQualification());
        teacher3.setFacultyPrograms(new ArrayList<FacultyProgram>());
        teacher3.setUser(new User());
        teacher3.setTeacherApprovals(new ArrayList<TeacherApproval>());
        teacher3.setEntranceQualification(new EntranceQualification());
        teacher3.setPanDocument("Pan Document");
        teacher3.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        teacher3.setBookPublications(new ArrayList<BookPublication>());
        teacher3.setResearchPublications(new ArrayList<ResearchPublication>());
        teacher3.setTeacherId(123L);
        teacher3.setPaperPresentedList(new ArrayList<PaperPresented>());
        teacher3.setAadharDocument("Aadhar Document");
        teacher3.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        teacher3.setUgQualification(new UGQualification());
        teacher3.setPanNumber("42");
        teacher3.setAadharNumber("42");
        teacher3.setFacultySeminars(new ArrayList<FacultySeminar>());
        teacher3.setPgQualification(new PGQualification());
        Student student2 = new Student();
        student2.setProgram(new Program());
        student2.setFatherName("Father Name");
        student2.setReligion("Religion");
        student2.setUser(new User());
        student2.setPanDocument("Pan Document");
        student2.setTenthMarks(10.0);
        student2.setTwelthMarks(10.0);
        student2.setStudentId(123L);
        student2.setMotherName("Mother Name");
        student2.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult16 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student2.setStartDate(Date.from(atStartOfDayResult16.atZone(ZoneId.of("UTC")).toInstant()));
        student2.setAadharDocument("Aadhar Document");
        student2.setPanNumber("42");
        student2.setAadharNumber("42");
        LocalDateTime atStartOfDayResult17 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student2.setCompletionDate(Date.from(atStartOfDayResult17.atZone(ZoneId.of("UTC")).toInstant()));
        student2.setMotherPhoneNumber("4105551212");
        student2.setCast("Cast");
        User user2 = new User();
        user2.setLastName("Doe");
        user2.setEmail("jane.doe@example.org");
        user2.setPassword("iloveyou");
        user2.setHod(hod3);
        user2.setRole(role3);
        user2.setUserId(123L);
        LocalDateTime atStartOfDayResult18 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user2.setCreatedAt(Date.from(atStartOfDayResult18.atZone(ZoneId.of("UTC")).toInstant()));
        user2.setMiddleName("Middle Name");
        user2.setFirstName("Jane");
        LocalDateTime atStartOfDayResult19 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user2.setDob(Date.from(atStartOfDayResult19.atZone(ZoneId.of("UTC")).toInstant()));
        user2.setTeacher(teacher3);
        user2.setGender("Gender");
        user2.setStudent(student2);
        user2.setPhone("4105551212");
        Student student3 = new Student();
        student3.setProgram(program2);
        student3.setFatherName("Father Name");
        student3.setReligion("Religion");
        student3.setUser(user2);
        student3.setPanDocument("Pan Document");
        student3.setTenthMarks(10.0);
        student3.setTwelthMarks(10.0);
        student3.setStudentId(123L);
        student3.setMotherName("Mother Name");
        student3.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult20 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student3.setStartDate(Date.from(atStartOfDayResult20.atZone(ZoneId.of("UTC")).toInstant()));
        student3.setAadharDocument("Aadhar Document");
        student3.setPanNumber("42");
        student3.setAadharNumber("42");
        LocalDateTime atStartOfDayResult21 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student3.setCompletionDate(Date.from(atStartOfDayResult21.atZone(ZoneId.of("UTC")).toInstant()));
        student3.setMotherPhoneNumber("4105551212");
        student3.setCast("Cast");
        User user3 = new User();
        user3.setLastName("Doe");
        user3.setEmail("jane.doe@example.org");
        user3.setPassword("iloveyou");
        user3.setHod(hod1);
        user3.setRole(role1);
        user3.setUserId(123L);
        LocalDateTime atStartOfDayResult22 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user3.setCreatedAt(Date.from(atStartOfDayResult22.atZone(ZoneId.of("UTC")).toInstant()));
        user3.setMiddleName("Middle Name");
        user3.setFirstName("Jane");
        LocalDateTime atStartOfDayResult23 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user3.setDob(Date.from(atStartOfDayResult23.atZone(ZoneId.of("UTC")).toInstant()));
        user3.setTeacher(teacher2);
        user3.setGender("Gender");
        user3.setStudent(student3);
        user3.setPhone("4105551212");
        actualAdmittedStudent.setUser(user3);
        assertEquals("Category", actualAdmittedStudent.getCategory());
        assertEquals(123L, actualAdmittedStudent.getId().longValue());
        assertSame(program1, actualAdmittedStudent.getProgram());
        assertEquals("Student Class", actualAdmittedStudent.getStudentClass());
        assertSame(user3, actualAdmittedStudent.getUser());
    }
}

