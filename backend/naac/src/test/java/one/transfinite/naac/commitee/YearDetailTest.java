package one.transfinite.naac.commitee;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import one.transfinite.naac.report.ReportOfActivities;
import org.junit.jupiter.api.Test;

class YearDetailTest {
    @Test
    void testConstructor() {
        YearDetail actualYearDetail = new YearDetail();
        ArrayList<AcademicCalender> academicCalenderList = new ArrayList<AcademicCalender>();
        actualYearDetail.setAcademicCalenders(academicCalenderList);
        actualYearDetail.setAcademicYear("Academic Year");
        Committee committee = new Committee();
        ArrayList<YearDetail> yearDetailList = new ArrayList<YearDetail>();
        committee.setYearDetails(yearDetailList);
        ArrayList<Achievement> achievementList = new ArrayList<Achievement>();
        committee.setAchievements(achievementList);
        committee.setId(123L);
        committee.setName("Name");
        LocalDateTime atStartOfDayResult = LocalDate.of(1970, 1, 1).atStartOfDay();
        committee.setCreatedAt(Date.from(atStartOfDayResult.atZone(ZoneId.of("UTC")).toInstant()));
        actualYearDetail.setCommittee(committee);
        ArrayList<CommitteeMember> committeeMemberList = new ArrayList<CommitteeMember>();
        actualYearDetail.setCommitteeMembers(committeeMemberList);
        actualYearDetail.setId(123L);
        ArrayList<MeetingRecord> meetingRecordList = new ArrayList<MeetingRecord>();
        actualYearDetail.setMeetingRecords(meetingRecordList);
        ArrayList<ReportOfActivities> reportOfActivitiesList = new ArrayList<ReportOfActivities>();
        actualYearDetail.setReportOfActivities(reportOfActivitiesList);
        ArrayList<StudentAchievement> studentAchievementList = new ArrayList<StudentAchievement>();
        actualYearDetail.setStudentAchievement(studentAchievementList);
        List<AcademicCalender> academicCalenders = actualYearDetail.getAcademicCalenders();
        assertSame(academicCalenderList, academicCalenders);
        assertEquals(yearDetailList, academicCalenders);
        assertEquals(achievementList, academicCalenders);
        assertEquals(committeeMemberList, academicCalenders);
        assertEquals(meetingRecordList, academicCalenders);
        assertEquals(reportOfActivitiesList, academicCalenders);
        assertEquals(studentAchievementList, academicCalenders);
        assertEquals("Academic Year", actualYearDetail.getAcademicYear());
        assertSame(committee, actualYearDetail.getCommittee());
        List<CommitteeMember> committeeMembers = actualYearDetail.getCommitteeMembers();
        assertSame(committeeMemberList, committeeMembers);
        assertEquals(yearDetailList, committeeMembers);
        assertEquals(achievementList, committeeMembers);
        assertEquals(academicCalenders, committeeMembers);
        List<MeetingRecord> meetingRecords = actualYearDetail.getMeetingRecords();
        assertEquals(meetingRecords, committeeMembers);
        List<ReportOfActivities> reportOfActivities = actualYearDetail.getReportOfActivities();
        assertEquals(reportOfActivities, committeeMembers);
        List<StudentAchievement> studentAchievement = actualYearDetail.getStudentAchievement();
        assertEquals(studentAchievement, committeeMembers);
        assertEquals(123L, actualYearDetail.getId().longValue());
        assertSame(meetingRecordList, meetingRecords);
        assertEquals(yearDetailList, meetingRecords);
        assertEquals(achievementList, meetingRecords);
        assertEquals(committeeMemberList, meetingRecords);
        assertEquals(academicCalenders, meetingRecords);
        assertEquals(reportOfActivities, meetingRecords);
        assertEquals(studentAchievement, meetingRecords);
        assertSame(reportOfActivitiesList, reportOfActivities);
        assertEquals(yearDetailList, reportOfActivities);
        assertEquals(achievementList, reportOfActivities);
        assertEquals(committeeMemberList, reportOfActivities);
        assertEquals(meetingRecordList, reportOfActivities);
        assertEquals(academicCalenders, reportOfActivities);
        assertEquals(studentAchievement, reportOfActivities);
        assertSame(studentAchievementList, studentAchievement);
        assertEquals(yearDetailList, studentAchievement);
        assertEquals(achievementList, studentAchievement);
        assertEquals(committeeMemberList, studentAchievement);
        assertEquals(meetingRecordList, studentAchievement);
        assertEquals(reportOfActivitiesList, studentAchievement);
        assertEquals(academicCalenders, studentAchievement);
    }

    @Test
    void testConstructor2() {
        Committee committee = new Committee();
        ArrayList<CommitteeMember> committeeMemberList = new ArrayList<CommitteeMember>();
        ArrayList<AcademicCalender> academicCalenderList = new ArrayList<AcademicCalender>();
        ArrayList<MeetingRecord> meetingRecordList = new ArrayList<MeetingRecord>();
        ArrayList<ReportOfActivities> reportOfActivitiesList = new ArrayList<ReportOfActivities>();
        ArrayList<StudentAchievement> studentAchievementList = new ArrayList<StudentAchievement>();
        YearDetail actualYearDetail = new YearDetail(123L, committee, "Academic Year", committeeMemberList,
                academicCalenderList, meetingRecordList, reportOfActivitiesList, studentAchievementList);
        ArrayList<AcademicCalender> academicCalenderList1 = new ArrayList<AcademicCalender>();
        actualYearDetail.setAcademicCalenders(academicCalenderList1);
        actualYearDetail.setAcademicYear("Academic Year");
        Committee committee1 = new Committee();
        ArrayList<YearDetail> yearDetailList = new ArrayList<YearDetail>();
        committee1.setYearDetails(yearDetailList);
        ArrayList<Achievement> achievementList = new ArrayList<Achievement>();
        committee1.setAchievements(achievementList);
        committee1.setId(123L);
        committee1.setName("Name");
        LocalDateTime atStartOfDayResult = LocalDate.of(1970, 1, 1).atStartOfDay();
        committee1.setCreatedAt(Date.from(atStartOfDayResult.atZone(ZoneId.of("UTC")).toInstant()));
        actualYearDetail.setCommittee(committee1);
        ArrayList<CommitteeMember> committeeMemberList1 = new ArrayList<CommitteeMember>();
        actualYearDetail.setCommitteeMembers(committeeMemberList1);
        actualYearDetail.setId(123L);
        ArrayList<MeetingRecord> meetingRecordList1 = new ArrayList<MeetingRecord>();
        actualYearDetail.setMeetingRecords(meetingRecordList1);
        ArrayList<ReportOfActivities> reportOfActivitiesList1 = new ArrayList<ReportOfActivities>();
        actualYearDetail.setReportOfActivities(reportOfActivitiesList1);
        ArrayList<StudentAchievement> studentAchievementList1 = new ArrayList<StudentAchievement>();
        actualYearDetail.setStudentAchievement(studentAchievementList1);
        List<AcademicCalender> academicCalenders = actualYearDetail.getAcademicCalenders();
        assertSame(academicCalenderList1, academicCalenders);
        assertEquals(committeeMemberList, academicCalenders);
        assertEquals(academicCalenderList, academicCalenders);
        assertEquals(meetingRecordList, academicCalenders);
        assertEquals(reportOfActivitiesList, academicCalenders);
        assertEquals(studentAchievementList, academicCalenders);
        assertEquals(yearDetailList, academicCalenders);
        assertEquals(achievementList, academicCalenders);
        assertEquals(committeeMemberList1, academicCalenders);
        assertEquals(meetingRecordList1, academicCalenders);
        assertEquals(reportOfActivitiesList1, academicCalenders);
        assertEquals(studentAchievementList1, academicCalenders);
        assertEquals("Academic Year", actualYearDetail.getAcademicYear());
        assertSame(committee1, actualYearDetail.getCommittee());
        List<CommitteeMember> committeeMembers = actualYearDetail.getCommitteeMembers();
        assertSame(committeeMemberList1, committeeMembers);
        assertEquals(committeeMemberList, committeeMembers);
        assertEquals(academicCalenderList, committeeMembers);
        assertEquals(meetingRecordList, committeeMembers);
        assertEquals(reportOfActivitiesList, committeeMembers);
        assertEquals(studentAchievementList, committeeMembers);
        assertEquals(yearDetailList, committeeMembers);
        assertEquals(achievementList, committeeMembers);
        assertEquals(academicCalenders, committeeMembers);
        List<MeetingRecord> meetingRecords = actualYearDetail.getMeetingRecords();
        assertEquals(meetingRecords, committeeMembers);
        List<ReportOfActivities> reportOfActivities = actualYearDetail.getReportOfActivities();
        assertEquals(reportOfActivities, committeeMembers);
        List<StudentAchievement> studentAchievement = actualYearDetail.getStudentAchievement();
        assertEquals(studentAchievement, committeeMembers);
        assertEquals(123L, actualYearDetail.getId().longValue());
        assertSame(meetingRecordList1, meetingRecords);
        assertEquals(committeeMemberList, meetingRecords);
        assertEquals(academicCalenderList, meetingRecords);
        assertEquals(meetingRecordList, meetingRecords);
        assertEquals(reportOfActivitiesList, meetingRecords);
        assertEquals(studentAchievementList, meetingRecords);
        assertEquals(yearDetailList, meetingRecords);
        assertEquals(achievementList, meetingRecords);
        assertEquals(committeeMemberList1, meetingRecords);
        assertEquals(academicCalenders, meetingRecords);
        assertEquals(reportOfActivities, meetingRecords);
        assertEquals(studentAchievement, meetingRecords);
        assertSame(reportOfActivitiesList1, reportOfActivities);
        assertEquals(committeeMemberList, reportOfActivities);
        assertEquals(academicCalenderList, reportOfActivities);
        assertEquals(meetingRecordList, reportOfActivities);
        assertEquals(reportOfActivitiesList, reportOfActivities);
        assertEquals(studentAchievementList, reportOfActivities);
        assertEquals(yearDetailList, reportOfActivities);
        assertEquals(achievementList, reportOfActivities);
        assertEquals(committeeMemberList1, reportOfActivities);
        assertEquals(meetingRecordList1, reportOfActivities);
        assertEquals(academicCalenders, reportOfActivities);
        assertEquals(studentAchievement, reportOfActivities);
        assertSame(studentAchievementList1, studentAchievement);
        assertEquals(committeeMemberList, studentAchievement);
        assertEquals(academicCalenderList, studentAchievement);
        assertEquals(meetingRecordList, studentAchievement);
        assertEquals(reportOfActivitiesList, studentAchievement);
        assertEquals(studentAchievementList, studentAchievement);
        assertEquals(yearDetailList, studentAchievement);
        assertEquals(achievementList, studentAchievement);
        assertEquals(committeeMemberList1, studentAchievement);
        assertEquals(meetingRecordList1, studentAchievement);
        assertEquals(reportOfActivitiesList1, studentAchievement);
        assertEquals(academicCalenders, studentAchievement);
    }
}

