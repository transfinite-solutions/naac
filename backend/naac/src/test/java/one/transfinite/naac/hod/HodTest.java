package one.transfinite.naac.hod;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import one.transfinite.naac.course.Course;
import one.transfinite.naac.department.Department;
import one.transfinite.naac.program.FacultyProgram;
import one.transfinite.naac.program.FacultySeminar;
import one.transfinite.naac.program.Program;
import one.transfinite.naac.publication.BookPublication;
import one.transfinite.naac.publication.PaperPresented;
import one.transfinite.naac.publication.ResearchPublication;
import one.transfinite.naac.qualification.EntranceQualification;
import one.transfinite.naac.qualification.PGQualification;
import one.transfinite.naac.qualification.ResearchQualification;
import one.transfinite.naac.qualification.UGQualification;
import one.transfinite.naac.role.Role;
import one.transfinite.naac.role.RoleName;
import one.transfinite.naac.student.AdmittedStudent;
import one.transfinite.naac.student.Student;
import one.transfinite.naac.teacher.Teacher;
import one.transfinite.naac.teacher.TeacherAppointment;
import one.transfinite.naac.teacher.TeacherApproval;
import one.transfinite.naac.teacher.TeacherTransfer;
import one.transfinite.naac.user.User;
import org.junit.jupiter.api.Test;

class HodTest {
    @Test
    void testConstructor() {
        Hod actualHod = new Hod();
        actualHod.setAadharDocument("Aadhar Document");
        actualHod.setAadharNumber("42");
        ArrayList<BookPublication> bookPublicationList = new ArrayList<BookPublication>();
        actualHod.setBookPublications(bookPublicationList);
        EntranceQualification entranceQualification = new EntranceQualification();
        entranceQualification.setSubject("Hello from the Dreaming Spires");
        entranceQualification.setUniversity("University");
        entranceQualification.setId(123L);
        entranceQualification.setName("Name");
        LocalDateTime atStartOfDayResult = LocalDate.of(1970, 1, 1).atStartOfDay();
        entranceQualification.setYearOfPassing(Date.from(atStartOfDayResult.atZone(ZoneId.of("UTC")).toInstant()));
        actualHod.setEntranceQualification(entranceQualification);
        actualHod.setId(123L);
        actualHod.setPanDocument("Pan Document");
        actualHod.setPanNumber("42");
        ArrayList<PaperPresented> paperPresentedList = new ArrayList<PaperPresented>();
        actualHod.setPaperPresentedList(paperPresentedList);
        PGQualification pgQualification = new PGQualification();
        pgQualification.setDocument("Document");
        pgQualification.setUniversity("University");
        pgQualification.setSpecialization("Specialization");
        pgQualification.setId(123L);
        pgQualification.setDegree("Degree");
        pgQualification.setGrade("Grade");
        LocalDateTime atStartOfDayResult1 = LocalDate.of(1970, 1, 1).atStartOfDay();
        pgQualification.setYearOfPassing(Date.from(atStartOfDayResult1.atZone(ZoneId.of("UTC")).toInstant()));
        actualHod.setPgQualification(pgQualification);
        ArrayList<ResearchPublication> researchPublicationList = new ArrayList<ResearchPublication>();
        actualHod.setResearchPublications(researchPublicationList);
        ResearchQualification researchQualification = new ResearchQualification();
        researchQualification.setSubject("Hello from the Dreaming Spires");
        researchQualification.setUniversity("University");
        researchQualification.setId(123L);
        researchQualification.setDegree("Degree");
        LocalDateTime atStartOfDayResult2 = LocalDate.of(1970, 1, 1).atStartOfDay();
        researchQualification.setDateOfDeclaration(Date.from(atStartOfDayResult2.atZone(ZoneId.of("UTC")).toInstant()));
        actualHod.setResearchQualification(researchQualification);
        ArrayList<TeacherAppointment> teacherAppointmentList = new ArrayList<TeacherAppointment>();
        actualHod.setTeacherAppointments(teacherAppointmentList);
        ArrayList<TeacherApproval> teacherApprovalList = new ArrayList<TeacherApproval>();
        actualHod.setTeacherApprovals(teacherApprovalList);
        ArrayList<TeacherTransfer> teacherTransferList = new ArrayList<TeacherTransfer>();
        actualHod.setTeacherTransfers(teacherTransferList);
        UGQualification ugQualification = new UGQualification();
        ugQualification.setDocument("Document");
        ugQualification.setUniversity("University");
        ugQualification.setSpecialization("Specialization");
        ugQualification.setId(123L);
        ugQualification.setDegree("Degree");
        ugQualification.setGrade("Grade");
        LocalDateTime atStartOfDayResult3 = LocalDate.of(1970, 1, 1).atStartOfDay();
        ugQualification.setYearOfPassing(Date.from(atStartOfDayResult3.atZone(ZoneId.of("UTC")).toInstant()));
        actualHod.setUgQualification(ugQualification);
        ResearchQualification researchQualification1 = new ResearchQualification();
        researchQualification1.setSubject("Hello from the Dreaming Spires");
        researchQualification1.setUniversity("University");
        researchQualification1.setId(123L);
        researchQualification1.setDegree("Degree");
        LocalDateTime atStartOfDayResult4 = LocalDate.of(1970, 1, 1).atStartOfDay();
        researchQualification1.setDateOfDeclaration(Date.from(atStartOfDayResult4.atZone(ZoneId.of("UTC")).toInstant()));
        Hod hod = new Hod();
        hod.setResearchQualification(new ResearchQualification());
        hod.setUser(new User());
        ArrayList<TeacherApproval> teacherApprovalList1 = new ArrayList<TeacherApproval>();
        hod.setTeacherApprovals(teacherApprovalList1);
        hod.setEntranceQualification(new EntranceQualification());
        hod.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList1 = new ArrayList<TeacherTransfer>();
        hod.setTeacherTransfers(teacherTransferList1);
        ArrayList<BookPublication> bookPublicationList1 = new ArrayList<BookPublication>();
        hod.setBookPublications(bookPublicationList1);
        ArrayList<ResearchPublication> researchPublicationList1 = new ArrayList<ResearchPublication>();
        hod.setResearchPublications(researchPublicationList1);
        ArrayList<PaperPresented> paperPresentedList1 = new ArrayList<PaperPresented>();
        hod.setPaperPresentedList(paperPresentedList1);
        hod.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList1 = new ArrayList<TeacherAppointment>();
        hod.setTeacherAppointments(teacherAppointmentList1);
        hod.setId(123L);
        hod.setUgQualification(new UGQualification());
        hod.setPanNumber("42");
        hod.setAadharNumber("42");
        hod.setPgQualification(new PGQualification());
        Role role = new Role();
        role.setRoleName(RoleName.Admin);
        role.setId(123L);
        Teacher teacher = new Teacher();
        teacher.setResearchQualification(new ResearchQualification());
        ArrayList<FacultyProgram> facultyProgramList = new ArrayList<FacultyProgram>();
        teacher.setFacultyPrograms(facultyProgramList);
        teacher.setUser(new User());
        ArrayList<TeacherApproval> teacherApprovalList2 = new ArrayList<TeacherApproval>();
        teacher.setTeacherApprovals(teacherApprovalList2);
        teacher.setEntranceQualification(new EntranceQualification());
        teacher.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList2 = new ArrayList<TeacherTransfer>();
        teacher.setTeacherTransfers(teacherTransferList2);
        ArrayList<BookPublication> bookPublicationList2 = new ArrayList<BookPublication>();
        teacher.setBookPublications(bookPublicationList2);
        ArrayList<ResearchPublication> researchPublicationList2 = new ArrayList<ResearchPublication>();
        teacher.setResearchPublications(researchPublicationList2);
        teacher.setTeacherId(123L);
        ArrayList<PaperPresented> paperPresentedList2 = new ArrayList<PaperPresented>();
        teacher.setPaperPresentedList(paperPresentedList2);
        teacher.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList2 = new ArrayList<TeacherAppointment>();
        teacher.setTeacherAppointments(teacherAppointmentList2);
        teacher.setUgQualification(new UGQualification());
        teacher.setPanNumber("42");
        teacher.setAadharNumber("42");
        ArrayList<FacultySeminar> facultySeminarList = new ArrayList<FacultySeminar>();
        teacher.setFacultySeminars(facultySeminarList);
        teacher.setPgQualification(new PGQualification());
        Student student = new Student();
        student.setProgram(new Program());
        student.setFatherName("Father Name");
        student.setReligion("Religion");
        student.setUser(new User());
        student.setPanDocument("Pan Document");
        student.setTenthMarks(10.0);
        student.setTwelthMarks(10.0);
        student.setStudentId(123L);
        student.setMotherName("Mother Name");
        student.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult5 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student.setStartDate(Date.from(atStartOfDayResult5.atZone(ZoneId.of("UTC")).toInstant()));
        student.setAadharDocument("Aadhar Document");
        student.setPanNumber("42");
        student.setAadharNumber("42");
        LocalDateTime atStartOfDayResult6 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student.setCompletionDate(Date.from(atStartOfDayResult6.atZone(ZoneId.of("UTC")).toInstant()));
        student.setMotherPhoneNumber("4105551212");
        student.setCast("Cast");
        User user = new User();
        user.setLastName("Doe");
        user.setEmail("jane.doe@example.org");
        user.setPassword("iloveyou");
        user.setHod(hod);
        user.setRole(role);
        user.setUserId(123L);
        LocalDateTime atStartOfDayResult7 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user.setCreatedAt(Date.from(atStartOfDayResult7.atZone(ZoneId.of("UTC")).toInstant()));
        user.setMiddleName("Middle Name");
        user.setFirstName("Jane");
        LocalDateTime atStartOfDayResult8 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user.setDob(Date.from(atStartOfDayResult8.atZone(ZoneId.of("UTC")).toInstant()));
        user.setTeacher(teacher);
        user.setGender("Gender");
        user.setStudent(student);
        user.setPhone("4105551212");
        EntranceQualification entranceQualification1 = new EntranceQualification();
        entranceQualification1.setSubject("Hello from the Dreaming Spires");
        entranceQualification1.setUniversity("University");
        entranceQualification1.setId(123L);
        entranceQualification1.setName("Name");
        LocalDateTime atStartOfDayResult9 = LocalDate.of(1970, 1, 1).atStartOfDay();
        entranceQualification1.setYearOfPassing(Date.from(atStartOfDayResult9.atZone(ZoneId.of("UTC")).toInstant()));
        UGQualification ugQualification1 = new UGQualification();
        ugQualification1.setDocument("Document");
        ugQualification1.setUniversity("University");
        ugQualification1.setSpecialization("Specialization");
        ugQualification1.setId(123L);
        ugQualification1.setDegree("Degree");
        ugQualification1.setGrade("Grade");
        LocalDateTime atStartOfDayResult10 = LocalDate.of(1970, 1, 1).atStartOfDay();
        ugQualification1.setYearOfPassing(Date.from(atStartOfDayResult10.atZone(ZoneId.of("UTC")).toInstant()));
        PGQualification pgQualification1 = new PGQualification();
        pgQualification1.setDocument("Document");
        pgQualification1.setUniversity("University");
        pgQualification1.setSpecialization("Specialization");
        pgQualification1.setId(123L);
        pgQualification1.setDegree("Degree");
        pgQualification1.setGrade("Grade");
        LocalDateTime atStartOfDayResult11 = LocalDate.of(1970, 1, 1).atStartOfDay();
        pgQualification1.setYearOfPassing(Date.from(atStartOfDayResult11.atZone(ZoneId.of("UTC")).toInstant()));
        Hod hod1 = new Hod();
        hod1.setResearchQualification(researchQualification1);
        hod1.setUser(user);
        ArrayList<TeacherApproval> teacherApprovalList3 = new ArrayList<TeacherApproval>();
        hod1.setTeacherApprovals(teacherApprovalList3);
        hod1.setEntranceQualification(entranceQualification1);
        hod1.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList3 = new ArrayList<TeacherTransfer>();
        hod1.setTeacherTransfers(teacherTransferList3);
        ArrayList<BookPublication> bookPublicationList3 = new ArrayList<BookPublication>();
        hod1.setBookPublications(bookPublicationList3);
        ArrayList<ResearchPublication> researchPublicationList3 = new ArrayList<ResearchPublication>();
        hod1.setResearchPublications(researchPublicationList3);
        ArrayList<PaperPresented> paperPresentedList3 = new ArrayList<PaperPresented>();
        hod1.setPaperPresentedList(paperPresentedList3);
        hod1.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList3 = new ArrayList<TeacherAppointment>();
        hod1.setTeacherAppointments(teacherAppointmentList3);
        hod1.setId(123L);
        hod1.setUgQualification(ugQualification1);
        hod1.setPanNumber("42");
        hod1.setAadharNumber("42");
        hod1.setPgQualification(pgQualification1);
        Role role1 = new Role();
        role1.setRoleName(RoleName.Admin);
        role1.setId(123L);
        ResearchQualification researchQualification2 = new ResearchQualification();
        researchQualification2.setSubject("Hello from the Dreaming Spires");
        researchQualification2.setUniversity("University");
        researchQualification2.setId(123L);
        researchQualification2.setDegree("Degree");
        LocalDateTime atStartOfDayResult12 = LocalDate.of(1970, 1, 1).atStartOfDay();
        researchQualification2.setDateOfDeclaration(Date.from(atStartOfDayResult12.atZone(ZoneId.of("UTC")).toInstant()));
        Hod hod2 = new Hod();
        hod2.setResearchQualification(new ResearchQualification());
        hod2.setUser(new User());
        ArrayList<TeacherApproval> teacherApprovalList4 = new ArrayList<TeacherApproval>();
        hod2.setTeacherApprovals(teacherApprovalList4);
        hod2.setEntranceQualification(new EntranceQualification());
        hod2.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList4 = new ArrayList<TeacherTransfer>();
        hod2.setTeacherTransfers(teacherTransferList4);
        ArrayList<BookPublication> bookPublicationList4 = new ArrayList<BookPublication>();
        hod2.setBookPublications(bookPublicationList4);
        ArrayList<ResearchPublication> researchPublicationList4 = new ArrayList<ResearchPublication>();
        hod2.setResearchPublications(researchPublicationList4);
        ArrayList<PaperPresented> paperPresentedList4 = new ArrayList<PaperPresented>();
        hod2.setPaperPresentedList(paperPresentedList4);
        hod2.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList4 = new ArrayList<TeacherAppointment>();
        hod2.setTeacherAppointments(teacherAppointmentList4);
        hod2.setId(123L);
        hod2.setUgQualification(new UGQualification());
        hod2.setPanNumber("42");
        hod2.setAadharNumber("42");
        hod2.setPgQualification(new PGQualification());
        Role role2 = new Role();
        role2.setRoleName(RoleName.Admin);
        role2.setId(123L);
        Teacher teacher1 = new Teacher();
        teacher1.setResearchQualification(new ResearchQualification());
        ArrayList<FacultyProgram> facultyProgramList1 = new ArrayList<FacultyProgram>();
        teacher1.setFacultyPrograms(facultyProgramList1);
        teacher1.setUser(new User());
        ArrayList<TeacherApproval> teacherApprovalList5 = new ArrayList<TeacherApproval>();
        teacher1.setTeacherApprovals(teacherApprovalList5);
        teacher1.setEntranceQualification(new EntranceQualification());
        teacher1.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList5 = new ArrayList<TeacherTransfer>();
        teacher1.setTeacherTransfers(teacherTransferList5);
        ArrayList<BookPublication> bookPublicationList5 = new ArrayList<BookPublication>();
        teacher1.setBookPublications(bookPublicationList5);
        ArrayList<ResearchPublication> researchPublicationList5 = new ArrayList<ResearchPublication>();
        teacher1.setResearchPublications(researchPublicationList5);
        teacher1.setTeacherId(123L);
        ArrayList<PaperPresented> paperPresentedList5 = new ArrayList<PaperPresented>();
        teacher1.setPaperPresentedList(paperPresentedList5);
        teacher1.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList5 = new ArrayList<TeacherAppointment>();
        teacher1.setTeacherAppointments(teacherAppointmentList5);
        teacher1.setUgQualification(new UGQualification());
        teacher1.setPanNumber("42");
        teacher1.setAadharNumber("42");
        ArrayList<FacultySeminar> facultySeminarList1 = new ArrayList<FacultySeminar>();
        teacher1.setFacultySeminars(facultySeminarList1);
        teacher1.setPgQualification(new PGQualification());
        Student student1 = new Student();
        student1.setProgram(new Program());
        student1.setFatherName("Father Name");
        student1.setReligion("Religion");
        student1.setUser(new User());
        student1.setPanDocument("Pan Document");
        student1.setTenthMarks(10.0);
        student1.setTwelthMarks(10.0);
        student1.setStudentId(123L);
        student1.setMotherName("Mother Name");
        student1.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult13 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student1.setStartDate(Date.from(atStartOfDayResult13.atZone(ZoneId.of("UTC")).toInstant()));
        student1.setAadharDocument("Aadhar Document");
        student1.setPanNumber("42");
        student1.setAadharNumber("42");
        LocalDateTime atStartOfDayResult14 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student1.setCompletionDate(Date.from(atStartOfDayResult14.atZone(ZoneId.of("UTC")).toInstant()));
        student1.setMotherPhoneNumber("4105551212");
        student1.setCast("Cast");
        User user1 = new User();
        user1.setLastName("Doe");
        user1.setEmail("jane.doe@example.org");
        user1.setPassword("iloveyou");
        user1.setHod(hod2);
        user1.setRole(role2);
        user1.setUserId(123L);
        LocalDateTime atStartOfDayResult15 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user1.setCreatedAt(Date.from(atStartOfDayResult15.atZone(ZoneId.of("UTC")).toInstant()));
        user1.setMiddleName("Middle Name");
        user1.setFirstName("Jane");
        LocalDateTime atStartOfDayResult16 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user1.setDob(Date.from(atStartOfDayResult16.atZone(ZoneId.of("UTC")).toInstant()));
        user1.setTeacher(teacher1);
        user1.setGender("Gender");
        user1.setStudent(student1);
        user1.setPhone("4105551212");
        EntranceQualification entranceQualification2 = new EntranceQualification();
        entranceQualification2.setSubject("Hello from the Dreaming Spires");
        entranceQualification2.setUniversity("University");
        entranceQualification2.setId(123L);
        entranceQualification2.setName("Name");
        LocalDateTime atStartOfDayResult17 = LocalDate.of(1970, 1, 1).atStartOfDay();
        entranceQualification2.setYearOfPassing(Date.from(atStartOfDayResult17.atZone(ZoneId.of("UTC")).toInstant()));
        UGQualification ugQualification2 = new UGQualification();
        ugQualification2.setDocument("Document");
        ugQualification2.setUniversity("University");
        ugQualification2.setSpecialization("Specialization");
        ugQualification2.setId(123L);
        ugQualification2.setDegree("Degree");
        ugQualification2.setGrade("Grade");
        LocalDateTime atStartOfDayResult18 = LocalDate.of(1970, 1, 1).atStartOfDay();
        ugQualification2.setYearOfPassing(Date.from(atStartOfDayResult18.atZone(ZoneId.of("UTC")).toInstant()));
        PGQualification pgQualification2 = new PGQualification();
        pgQualification2.setDocument("Document");
        pgQualification2.setUniversity("University");
        pgQualification2.setSpecialization("Specialization");
        pgQualification2.setId(123L);
        pgQualification2.setDegree("Degree");
        pgQualification2.setGrade("Grade");
        LocalDateTime atStartOfDayResult19 = LocalDate.of(1970, 1, 1).atStartOfDay();
        pgQualification2.setYearOfPassing(Date.from(atStartOfDayResult19.atZone(ZoneId.of("UTC")).toInstant()));
        Teacher teacher2 = new Teacher();
        teacher2.setResearchQualification(researchQualification2);
        ArrayList<FacultyProgram> facultyProgramList2 = new ArrayList<FacultyProgram>();
        teacher2.setFacultyPrograms(facultyProgramList2);
        teacher2.setUser(user1);
        ArrayList<TeacherApproval> teacherApprovalList6 = new ArrayList<TeacherApproval>();
        teacher2.setTeacherApprovals(teacherApprovalList6);
        teacher2.setEntranceQualification(entranceQualification2);
        teacher2.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList6 = new ArrayList<TeacherTransfer>();
        teacher2.setTeacherTransfers(teacherTransferList6);
        ArrayList<BookPublication> bookPublicationList6 = new ArrayList<BookPublication>();
        teacher2.setBookPublications(bookPublicationList6);
        ArrayList<ResearchPublication> researchPublicationList6 = new ArrayList<ResearchPublication>();
        teacher2.setResearchPublications(researchPublicationList6);
        teacher2.setTeacherId(123L);
        ArrayList<PaperPresented> paperPresentedList6 = new ArrayList<PaperPresented>();
        teacher2.setPaperPresentedList(paperPresentedList6);
        teacher2.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList6 = new ArrayList<TeacherAppointment>();
        teacher2.setTeacherAppointments(teacherAppointmentList6);
        teacher2.setUgQualification(ugQualification2);
        teacher2.setPanNumber("42");
        teacher2.setAadharNumber("42");
        ArrayList<FacultySeminar> facultySeminarList2 = new ArrayList<FacultySeminar>();
        teacher2.setFacultySeminars(facultySeminarList2);
        teacher2.setPgQualification(pgQualification2);
        Department department = new Department();
        department.setId(123L);
        department.setDepartmentName("Department Name");
        ArrayList<Program> programList = new ArrayList<Program>();
        department.setPrograms(programList);
        department.setEstablishmentYear("Establishment Year");
        Program program = new Program();
        program.setProgramCode("Program Code");
        program.setProgramName("Program Name");
        ArrayList<Course> courseList = new ArrayList<Course>();
        program.setCourses(courseList);
        program.setProgramId(123L);
        program.setStartYear("Start Year");
        ArrayList<AdmittedStudent> admittedStudentList = new ArrayList<AdmittedStudent>();
        program.setAdmittedStudents(admittedStudentList);
        program.setDepartment(department);
        program.setProgramType("Program Type");
        Hod hod3 = new Hod();
        hod3.setResearchQualification(new ResearchQualification());
        hod3.setUser(new User());
        ArrayList<TeacherApproval> teacherApprovalList7 = new ArrayList<TeacherApproval>();
        hod3.setTeacherApprovals(teacherApprovalList7);
        hod3.setEntranceQualification(new EntranceQualification());
        hod3.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList7 = new ArrayList<TeacherTransfer>();
        hod3.setTeacherTransfers(teacherTransferList7);
        ArrayList<BookPublication> bookPublicationList7 = new ArrayList<BookPublication>();
        hod3.setBookPublications(bookPublicationList7);
        ArrayList<ResearchPublication> researchPublicationList7 = new ArrayList<ResearchPublication>();
        hod3.setResearchPublications(researchPublicationList7);
        ArrayList<PaperPresented> paperPresentedList7 = new ArrayList<PaperPresented>();
        hod3.setPaperPresentedList(paperPresentedList7);
        hod3.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList7 = new ArrayList<TeacherAppointment>();
        hod3.setTeacherAppointments(teacherAppointmentList7);
        hod3.setId(123L);
        hod3.setUgQualification(new UGQualification());
        hod3.setPanNumber("42");
        hod3.setAadharNumber("42");
        hod3.setPgQualification(new PGQualification());
        Role role3 = new Role();
        role3.setRoleName(RoleName.Admin);
        role3.setId(123L);
        Teacher teacher3 = new Teacher();
        teacher3.setResearchQualification(new ResearchQualification());
        ArrayList<FacultyProgram> facultyProgramList3 = new ArrayList<FacultyProgram>();
        teacher3.setFacultyPrograms(facultyProgramList3);
        teacher3.setUser(new User());
        ArrayList<TeacherApproval> teacherApprovalList8 = new ArrayList<TeacherApproval>();
        teacher3.setTeacherApprovals(teacherApprovalList8);
        teacher3.setEntranceQualification(new EntranceQualification());
        teacher3.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList8 = new ArrayList<TeacherTransfer>();
        teacher3.setTeacherTransfers(teacherTransferList8);
        ArrayList<BookPublication> bookPublicationList8 = new ArrayList<BookPublication>();
        teacher3.setBookPublications(bookPublicationList8);
        ArrayList<ResearchPublication> researchPublicationList8 = new ArrayList<ResearchPublication>();
        teacher3.setResearchPublications(researchPublicationList8);
        teacher3.setTeacherId(123L);
        ArrayList<PaperPresented> paperPresentedList8 = new ArrayList<PaperPresented>();
        teacher3.setPaperPresentedList(paperPresentedList8);
        teacher3.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList8 = new ArrayList<TeacherAppointment>();
        teacher3.setTeacherAppointments(teacherAppointmentList8);
        teacher3.setUgQualification(new UGQualification());
        teacher3.setPanNumber("42");
        teacher3.setAadharNumber("42");
        ArrayList<FacultySeminar> facultySeminarList3 = new ArrayList<FacultySeminar>();
        teacher3.setFacultySeminars(facultySeminarList3);
        teacher3.setPgQualification(new PGQualification());
        Student student2 = new Student();
        student2.setProgram(new Program());
        student2.setFatherName("Father Name");
        student2.setReligion("Religion");
        student2.setUser(new User());
        student2.setPanDocument("Pan Document");
        student2.setTenthMarks(10.0);
        student2.setTwelthMarks(10.0);
        student2.setStudentId(123L);
        student2.setMotherName("Mother Name");
        student2.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult20 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student2.setStartDate(Date.from(atStartOfDayResult20.atZone(ZoneId.of("UTC")).toInstant()));
        student2.setAadharDocument("Aadhar Document");
        student2.setPanNumber("42");
        student2.setAadharNumber("42");
        LocalDateTime atStartOfDayResult21 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student2.setCompletionDate(Date.from(atStartOfDayResult21.atZone(ZoneId.of("UTC")).toInstant()));
        student2.setMotherPhoneNumber("4105551212");
        student2.setCast("Cast");
        User user2 = new User();
        user2.setLastName("Doe");
        user2.setEmail("jane.doe@example.org");
        user2.setPassword("iloveyou");
        user2.setHod(hod3);
        user2.setRole(role3);
        user2.setUserId(123L);
        LocalDateTime atStartOfDayResult22 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user2.setCreatedAt(Date.from(atStartOfDayResult22.atZone(ZoneId.of("UTC")).toInstant()));
        user2.setMiddleName("Middle Name");
        user2.setFirstName("Jane");
        LocalDateTime atStartOfDayResult23 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user2.setDob(Date.from(atStartOfDayResult23.atZone(ZoneId.of("UTC")).toInstant()));
        user2.setTeacher(teacher3);
        user2.setGender("Gender");
        user2.setStudent(student2);
        user2.setPhone("4105551212");
        Student student3 = new Student();
        student3.setProgram(program);
        student3.setFatherName("Father Name");
        student3.setReligion("Religion");
        student3.setUser(user2);
        student3.setPanDocument("Pan Document");
        student3.setTenthMarks(10.0);
        student3.setTwelthMarks(10.0);
        student3.setStudentId(123L);
        student3.setMotherName("Mother Name");
        student3.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult24 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student3.setStartDate(Date.from(atStartOfDayResult24.atZone(ZoneId.of("UTC")).toInstant()));
        student3.setAadharDocument("Aadhar Document");
        student3.setPanNumber("42");
        student3.setAadharNumber("42");
        LocalDateTime atStartOfDayResult25 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student3.setCompletionDate(Date.from(atStartOfDayResult25.atZone(ZoneId.of("UTC")).toInstant()));
        student3.setMotherPhoneNumber("4105551212");
        student3.setCast("Cast");
        User user3 = new User();
        user3.setLastName("Doe");
        user3.setEmail("jane.doe@example.org");
        user3.setPassword("iloveyou");
        user3.setHod(hod1);
        user3.setRole(role1);
        user3.setUserId(123L);
        LocalDateTime atStartOfDayResult26 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user3.setCreatedAt(Date.from(atStartOfDayResult26.atZone(ZoneId.of("UTC")).toInstant()));
        user3.setMiddleName("Middle Name");
        user3.setFirstName("Jane");
        LocalDateTime atStartOfDayResult27 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user3.setDob(Date.from(atStartOfDayResult27.atZone(ZoneId.of("UTC")).toInstant()));
        user3.setTeacher(teacher2);
        user3.setGender("Gender");
        user3.setStudent(student3);
        user3.setPhone("4105551212");
        actualHod.setUser(user3);
        assertEquals("Aadhar Document", actualHod.getAadharDocument());
        assertEquals("42", actualHod.getAadharNumber());
        List<BookPublication> bookPublications = actualHod.getBookPublications();
        assertSame(bookPublicationList, bookPublications);
        assertEquals(teacherAppointmentList, bookPublications);
        assertEquals(teacherApprovalList, bookPublications);
        assertEquals(teacherTransferList, bookPublications);
        assertEquals(teacherApprovalList1, bookPublications);
        assertEquals(teacherTransferList1, bookPublications);
        assertEquals(bookPublicationList1, bookPublications);
        assertEquals(researchPublicationList1, bookPublications);
        assertEquals(paperPresentedList1, bookPublications);
        assertEquals(teacherAppointmentList1, bookPublications);
        assertEquals(facultyProgramList, bookPublications);
        assertEquals(teacherApprovalList2, bookPublications);
        assertEquals(teacherTransferList2, bookPublications);
        assertEquals(bookPublicationList2, bookPublications);
        assertEquals(researchPublicationList2, bookPublications);
        assertEquals(paperPresentedList2, bookPublications);
        assertEquals(teacherAppointmentList2, bookPublications);
        assertEquals(facultySeminarList, bookPublications);
        assertEquals(teacherApprovalList3, bookPublications);
        assertEquals(teacherTransferList3, bookPublications);
        assertEquals(bookPublicationList3, bookPublications);
        assertEquals(researchPublicationList3, bookPublications);
        assertEquals(paperPresentedList3, bookPublications);
        assertEquals(teacherAppointmentList3, bookPublications);
        assertEquals(facultyProgramList2, bookPublications);
        assertEquals(teacherApprovalList4, bookPublications);
        assertEquals(teacherTransferList4, bookPublications);
        assertEquals(bookPublicationList4, bookPublications);
        assertEquals(researchPublicationList4, bookPublications);
        assertEquals(paperPresentedList4, bookPublications);
        assertEquals(teacherAppointmentList4, bookPublications);
        assertEquals(facultyProgramList1, bookPublications);
        assertEquals(teacherApprovalList5, bookPublications);
        assertEquals(teacherTransferList5, bookPublications);
        assertEquals(bookPublicationList5, bookPublications);
        assertEquals(researchPublicationList5, bookPublications);
        assertEquals(paperPresentedList5, bookPublications);
        assertEquals(teacherAppointmentList5, bookPublications);
        assertEquals(facultySeminarList1, bookPublications);
        assertEquals(teacherApprovalList6, bookPublications);
        assertEquals(teacherTransferList6, bookPublications);
        assertEquals(bookPublicationList6, bookPublications);
        assertEquals(researchPublicationList6, bookPublications);
        assertEquals(paperPresentedList6, bookPublications);
        assertEquals(teacherAppointmentList6, bookPublications);
        assertEquals(facultySeminarList2, bookPublications);
        assertEquals(courseList, bookPublications);
        assertEquals(admittedStudentList, bookPublications);
        assertEquals(programList, bookPublications);
        assertEquals(teacherApprovalList7, bookPublications);
        assertEquals(teacherTransferList7, bookPublications);
        assertEquals(bookPublicationList7, bookPublications);
        assertEquals(researchPublicationList7, bookPublications);
        assertEquals(paperPresentedList7, bookPublications);
        assertEquals(teacherAppointmentList7, bookPublications);
        assertEquals(facultyProgramList3, bookPublications);
        assertEquals(teacherApprovalList8, bookPublications);
        assertEquals(teacherTransferList8, bookPublications);
        assertEquals(bookPublicationList8, bookPublications);
        assertEquals(researchPublicationList8, bookPublications);
        assertEquals(paperPresentedList8, bookPublications);
        assertEquals(teacherAppointmentList8, bookPublications);
        assertEquals(facultySeminarList3, bookPublications);
        List<PaperPresented> paperPresentedList9 = actualHod.getPaperPresentedList();
        assertEquals(paperPresentedList9, bookPublications);
        List<ResearchPublication> researchPublications = actualHod.getResearchPublications();
        assertEquals(researchPublications, bookPublications);
        assertSame(entranceQualification, actualHod.getEntranceQualification());
        assertEquals(123L, actualHod.getId().longValue());
        assertEquals("Pan Document", actualHod.getPanDocument());
        assertEquals("42", actualHod.getPanNumber());
        assertSame(paperPresentedList, paperPresentedList9);
        assertEquals(bookPublicationList, paperPresentedList9);
        assertEquals(researchPublicationList, paperPresentedList9);
        assertEquals(teacherAppointmentList, paperPresentedList9);
        assertEquals(teacherApprovalList, paperPresentedList9);
        assertEquals(teacherTransferList, paperPresentedList9);
        assertEquals(teacherApprovalList1, paperPresentedList9);
        assertEquals(teacherTransferList1, paperPresentedList9);
        assertEquals(bookPublicationList1, paperPresentedList9);
        assertEquals(researchPublicationList1, paperPresentedList9);
        assertEquals(paperPresentedList1, paperPresentedList9);
        assertEquals(teacherAppointmentList1, paperPresentedList9);
        assertEquals(facultyProgramList, paperPresentedList9);
        assertEquals(teacherApprovalList2, paperPresentedList9);
        assertEquals(teacherTransferList2, paperPresentedList9);
        assertEquals(bookPublicationList2, paperPresentedList9);
        assertEquals(researchPublicationList2, paperPresentedList9);
        assertEquals(paperPresentedList2, paperPresentedList9);
        assertEquals(teacherAppointmentList2, paperPresentedList9);
        assertEquals(facultySeminarList, paperPresentedList9);
        assertEquals(teacherApprovalList3, paperPresentedList9);
        assertEquals(teacherTransferList3, paperPresentedList9);
        assertEquals(bookPublicationList3, paperPresentedList9);
        assertEquals(researchPublicationList3, paperPresentedList9);
        assertEquals(paperPresentedList3, paperPresentedList9);
        assertEquals(teacherAppointmentList3, paperPresentedList9);
        assertEquals(facultyProgramList2, paperPresentedList9);
        assertEquals(teacherApprovalList4, paperPresentedList9);
        assertEquals(teacherTransferList4, paperPresentedList9);
        assertEquals(bookPublicationList4, paperPresentedList9);
        assertEquals(researchPublicationList4, paperPresentedList9);
        assertEquals(paperPresentedList4, paperPresentedList9);
        assertEquals(teacherAppointmentList4, paperPresentedList9);
        assertEquals(facultyProgramList1, paperPresentedList9);
        assertEquals(teacherApprovalList5, paperPresentedList9);
        assertEquals(teacherTransferList5, paperPresentedList9);
        assertEquals(bookPublicationList5, paperPresentedList9);
        assertEquals(researchPublicationList5, paperPresentedList9);
        assertEquals(paperPresentedList5, paperPresentedList9);
        assertEquals(teacherAppointmentList5, paperPresentedList9);
        assertEquals(facultySeminarList1, paperPresentedList9);
        assertEquals(teacherApprovalList6, paperPresentedList9);
        assertEquals(teacherTransferList6, paperPresentedList9);
        assertEquals(bookPublicationList6, paperPresentedList9);
        assertEquals(researchPublicationList6, paperPresentedList9);
        assertEquals(paperPresentedList6, paperPresentedList9);
        assertEquals(teacherAppointmentList6, paperPresentedList9);
        assertEquals(facultySeminarList2, paperPresentedList9);
        assertEquals(courseList, paperPresentedList9);
        assertEquals(admittedStudentList, paperPresentedList9);
        assertEquals(programList, paperPresentedList9);
        assertEquals(teacherApprovalList7, paperPresentedList9);
        assertEquals(teacherTransferList7, paperPresentedList9);
        assertEquals(bookPublicationList7, paperPresentedList9);
        assertEquals(researchPublicationList7, paperPresentedList9);
        assertEquals(paperPresentedList7, paperPresentedList9);
        assertEquals(teacherAppointmentList7, paperPresentedList9);
        assertEquals(facultyProgramList3, paperPresentedList9);
        assertEquals(teacherApprovalList8, paperPresentedList9);
        assertEquals(teacherTransferList8, paperPresentedList9);
        assertEquals(bookPublicationList8, paperPresentedList9);
        assertEquals(researchPublicationList8, paperPresentedList9);
        assertEquals(paperPresentedList8, paperPresentedList9);
        assertEquals(teacherAppointmentList8, paperPresentedList9);
        assertEquals(facultySeminarList3, paperPresentedList9);
        assertSame(pgQualification, actualHod.getPgQualification());
        assertSame(researchPublicationList, researchPublications);
        assertEquals(bookPublicationList, researchPublications);
        assertEquals(teacherAppointmentList, researchPublications);
        assertEquals(teacherApprovalList, researchPublications);
        assertEquals(teacherTransferList, researchPublications);
        assertEquals(teacherApprovalList1, researchPublications);
        assertEquals(teacherTransferList1, researchPublications);
        assertEquals(bookPublicationList1, researchPublications);
        assertEquals(researchPublicationList1, researchPublications);
        assertEquals(paperPresentedList1, researchPublications);
        assertEquals(teacherAppointmentList1, researchPublications);
        assertEquals(facultyProgramList, researchPublications);
        assertEquals(teacherApprovalList2, researchPublications);
        assertEquals(teacherTransferList2, researchPublications);
        assertEquals(bookPublicationList2, researchPublications);
        assertEquals(researchPublicationList2, researchPublications);
        assertEquals(paperPresentedList2, researchPublications);
        assertEquals(teacherAppointmentList2, researchPublications);
        assertEquals(facultySeminarList, researchPublications);
        assertEquals(teacherApprovalList3, researchPublications);
        assertEquals(teacherTransferList3, researchPublications);
        assertEquals(bookPublicationList3, researchPublications);
        assertEquals(researchPublicationList3, researchPublications);
        assertEquals(paperPresentedList3, researchPublications);
        assertEquals(teacherAppointmentList3, researchPublications);
        assertEquals(facultyProgramList2, researchPublications);
        assertEquals(teacherApprovalList4, researchPublications);
        assertEquals(teacherTransferList4, researchPublications);
        assertEquals(bookPublicationList4, researchPublications);
        assertEquals(researchPublicationList4, researchPublications);
        assertEquals(paperPresentedList4, researchPublications);
        assertEquals(teacherAppointmentList4, researchPublications);
        assertEquals(facultyProgramList1, researchPublications);
        assertEquals(teacherApprovalList5, researchPublications);
        assertEquals(teacherTransferList5, researchPublications);
        assertEquals(bookPublicationList5, researchPublications);
        assertEquals(researchPublicationList5, researchPublications);
        assertEquals(paperPresentedList5, researchPublications);
        assertEquals(teacherAppointmentList5, researchPublications);
        assertEquals(facultySeminarList1, researchPublications);
        assertEquals(teacherApprovalList6, researchPublications);
        assertEquals(teacherTransferList6, researchPublications);
        assertEquals(bookPublicationList6, researchPublications);
        assertEquals(researchPublicationList6, researchPublications);
        assertEquals(paperPresentedList6, researchPublications);
        assertEquals(teacherAppointmentList6, researchPublications);
        assertEquals(facultySeminarList2, researchPublications);
        assertEquals(courseList, researchPublications);
        assertEquals(admittedStudentList, researchPublications);
        assertEquals(programList, researchPublications);
        assertEquals(teacherApprovalList7, researchPublications);
        assertEquals(teacherTransferList7, researchPublications);
        assertEquals(bookPublicationList7, researchPublications);
        assertEquals(researchPublicationList7, researchPublications);
        assertEquals(paperPresentedList7, researchPublications);
        assertEquals(teacherAppointmentList7, researchPublications);
        assertEquals(facultyProgramList3, researchPublications);
        assertEquals(teacherApprovalList8, researchPublications);
        assertEquals(teacherTransferList8, researchPublications);
        assertEquals(bookPublicationList8, researchPublications);
        assertEquals(researchPublicationList8, researchPublications);
        assertEquals(paperPresentedList8, researchPublications);
        assertEquals(teacherAppointmentList8, researchPublications);
        assertEquals(facultySeminarList3, researchPublications);
        assertEquals(paperPresentedList9, researchPublications);
        assertSame(researchQualification, actualHod.getResearchQualification());
        List<TeacherAppointment> teacherAppointments = actualHod.getTeacherAppointments();
        assertSame(teacherAppointmentList, teacherAppointments);
        assertEquals(teacherApprovalList, teacherAppointments);
        assertEquals(teacherTransferList, teacherAppointments);
        assertEquals(teacherApprovalList1, teacherAppointments);
        assertEquals(teacherTransferList1, teacherAppointments);
        assertEquals(bookPublicationList1, teacherAppointments);
        assertEquals(researchPublicationList1, teacherAppointments);
        assertEquals(paperPresentedList1, teacherAppointments);
        assertEquals(teacherAppointmentList1, teacherAppointments);
        assertEquals(facultyProgramList, teacherAppointments);
        assertEquals(teacherApprovalList2, teacherAppointments);
        assertEquals(teacherTransferList2, teacherAppointments);
        assertEquals(bookPublicationList2, teacherAppointments);
        assertEquals(researchPublicationList2, teacherAppointments);
        assertEquals(paperPresentedList2, teacherAppointments);
        assertEquals(teacherAppointmentList2, teacherAppointments);
        assertEquals(facultySeminarList, teacherAppointments);
        assertEquals(teacherApprovalList3, teacherAppointments);
        assertEquals(teacherTransferList3, teacherAppointments);
        assertEquals(bookPublicationList3, teacherAppointments);
        assertEquals(researchPublicationList3, teacherAppointments);
        assertEquals(paperPresentedList3, teacherAppointments);
        assertEquals(teacherAppointmentList3, teacherAppointments);
        assertEquals(facultyProgramList2, teacherAppointments);
        assertEquals(teacherApprovalList4, teacherAppointments);
        assertEquals(teacherTransferList4, teacherAppointments);
        assertEquals(bookPublicationList4, teacherAppointments);
        assertEquals(researchPublicationList4, teacherAppointments);
        assertEquals(paperPresentedList4, teacherAppointments);
        assertEquals(teacherAppointmentList4, teacherAppointments);
        assertEquals(facultyProgramList1, teacherAppointments);
        assertEquals(teacherApprovalList5, teacherAppointments);
        assertEquals(teacherTransferList5, teacherAppointments);
        assertEquals(bookPublicationList5, teacherAppointments);
        assertEquals(researchPublicationList5, teacherAppointments);
        assertEquals(paperPresentedList5, teacherAppointments);
        assertEquals(teacherAppointmentList5, teacherAppointments);
        assertEquals(facultySeminarList1, teacherAppointments);
        assertEquals(teacherApprovalList6, teacherAppointments);
        assertEquals(teacherTransferList6, teacherAppointments);
        assertEquals(bookPublicationList6, teacherAppointments);
        assertEquals(researchPublicationList6, teacherAppointments);
        assertEquals(paperPresentedList6, teacherAppointments);
        assertEquals(teacherAppointmentList6, teacherAppointments);
        assertEquals(facultySeminarList2, teacherAppointments);
        assertEquals(courseList, teacherAppointments);
        assertEquals(admittedStudentList, teacherAppointments);
        assertEquals(programList, teacherAppointments);
        assertEquals(teacherApprovalList7, teacherAppointments);
        assertEquals(teacherTransferList7, teacherAppointments);
        assertEquals(bookPublicationList7, teacherAppointments);
        assertEquals(researchPublicationList7, teacherAppointments);
        assertEquals(paperPresentedList7, teacherAppointments);
        assertEquals(teacherAppointmentList7, teacherAppointments);
        assertEquals(facultyProgramList3, teacherAppointments);
        assertEquals(teacherApprovalList8, teacherAppointments);
        assertEquals(teacherTransferList8, teacherAppointments);
        assertEquals(bookPublicationList8, teacherAppointments);
        assertEquals(researchPublicationList8, teacherAppointments);
        assertEquals(paperPresentedList8, teacherAppointments);
        assertEquals(teacherAppointmentList8, teacherAppointments);
        assertEquals(facultySeminarList3, teacherAppointments);
        assertEquals(bookPublications, teacherAppointments);
        assertEquals(paperPresentedList9, teacherAppointments);
        assertEquals(researchPublications, teacherAppointments);
        List<TeacherApproval> teacherApprovals = actualHod.getTeacherApprovals();
        assertSame(teacherApprovalList, teacherApprovals);
        assertEquals(teacherTransferList, teacherApprovals);
        assertEquals(teacherApprovalList1, teacherApprovals);
        assertEquals(teacherTransferList1, teacherApprovals);
        assertEquals(bookPublicationList1, teacherApprovals);
        assertEquals(researchPublicationList1, teacherApprovals);
        assertEquals(paperPresentedList1, teacherApprovals);
        assertEquals(teacherAppointmentList1, teacherApprovals);
        assertEquals(facultyProgramList, teacherApprovals);
        assertEquals(teacherApprovalList2, teacherApprovals);
        assertEquals(teacherTransferList2, teacherApprovals);
        assertEquals(bookPublicationList2, teacherApprovals);
        assertEquals(researchPublicationList2, teacherApprovals);
        assertEquals(paperPresentedList2, teacherApprovals);
        assertEquals(teacherAppointmentList2, teacherApprovals);
        assertEquals(facultySeminarList, teacherApprovals);
        assertEquals(teacherApprovalList3, teacherApprovals);
        assertEquals(teacherTransferList3, teacherApprovals);
        assertEquals(bookPublicationList3, teacherApprovals);
        assertEquals(researchPublicationList3, teacherApprovals);
        assertEquals(paperPresentedList3, teacherApprovals);
        assertEquals(teacherAppointmentList3, teacherApprovals);
        assertEquals(facultyProgramList2, teacherApprovals);
        assertEquals(teacherApprovalList4, teacherApprovals);
        assertEquals(teacherTransferList4, teacherApprovals);
        assertEquals(bookPublicationList4, teacherApprovals);
        assertEquals(researchPublicationList4, teacherApprovals);
        assertEquals(paperPresentedList4, teacherApprovals);
        assertEquals(teacherAppointmentList4, teacherApprovals);
        assertEquals(facultyProgramList1, teacherApprovals);
        assertEquals(teacherApprovalList5, teacherApprovals);
        assertEquals(teacherTransferList5, teacherApprovals);
        assertEquals(bookPublicationList5, teacherApprovals);
        assertEquals(researchPublicationList5, teacherApprovals);
        assertEquals(paperPresentedList5, teacherApprovals);
        assertEquals(teacherAppointmentList5, teacherApprovals);
        assertEquals(facultySeminarList1, teacherApprovals);
        assertEquals(teacherApprovalList6, teacherApprovals);
        assertEquals(teacherTransferList6, teacherApprovals);
        assertEquals(bookPublicationList6, teacherApprovals);
        assertEquals(researchPublicationList6, teacherApprovals);
        assertEquals(paperPresentedList6, teacherApprovals);
        assertEquals(teacherAppointmentList6, teacherApprovals);
        assertEquals(facultySeminarList2, teacherApprovals);
        assertEquals(courseList, teacherApprovals);
        assertEquals(admittedStudentList, teacherApprovals);
        assertEquals(programList, teacherApprovals);
        assertEquals(teacherApprovalList7, teacherApprovals);
        assertEquals(teacherTransferList7, teacherApprovals);
        assertEquals(bookPublicationList7, teacherApprovals);
        assertEquals(researchPublicationList7, teacherApprovals);
        assertEquals(paperPresentedList7, teacherApprovals);
        assertEquals(teacherAppointmentList7, teacherApprovals);
        assertEquals(facultyProgramList3, teacherApprovals);
        assertEquals(teacherApprovalList8, teacherApprovals);
        assertEquals(teacherTransferList8, teacherApprovals);
        assertEquals(bookPublicationList8, teacherApprovals);
        assertEquals(researchPublicationList8, teacherApprovals);
        assertEquals(paperPresentedList8, teacherApprovals);
        assertEquals(teacherAppointmentList8, teacherApprovals);
        assertEquals(facultySeminarList3, teacherApprovals);
        assertEquals(bookPublications, teacherApprovals);
        assertEquals(paperPresentedList9, teacherApprovals);
        assertEquals(researchPublications, teacherApprovals);
        assertEquals(teacherAppointments, teacherApprovals);
        List<TeacherTransfer> teacherTransfers = actualHod.getTeacherTransfers();
        assertSame(teacherTransferList, teacherTransfers);
        assertEquals(teacherApprovalList1, teacherTransfers);
        assertEquals(teacherTransferList1, teacherTransfers);
        assertEquals(bookPublicationList1, teacherTransfers);
        assertEquals(researchPublicationList1, teacherTransfers);
        assertEquals(paperPresentedList1, teacherTransfers);
        assertEquals(teacherAppointmentList1, teacherTransfers);
        assertEquals(facultyProgramList, teacherTransfers);
        assertEquals(teacherApprovalList2, teacherTransfers);
        assertEquals(teacherTransferList2, teacherTransfers);
        assertEquals(bookPublicationList2, teacherTransfers);
        assertEquals(researchPublicationList2, teacherTransfers);
        assertEquals(paperPresentedList2, teacherTransfers);
        assertEquals(teacherAppointmentList2, teacherTransfers);
        assertEquals(facultySeminarList, teacherTransfers);
        assertEquals(teacherApprovalList3, teacherTransfers);
        assertEquals(teacherTransferList3, teacherTransfers);
        assertEquals(bookPublicationList3, teacherTransfers);
        assertEquals(researchPublicationList3, teacherTransfers);
        assertEquals(paperPresentedList3, teacherTransfers);
        assertEquals(teacherAppointmentList3, teacherTransfers);
        assertEquals(facultyProgramList2, teacherTransfers);
        assertEquals(teacherApprovalList4, teacherTransfers);
        assertEquals(teacherTransferList4, teacherTransfers);
        assertEquals(bookPublicationList4, teacherTransfers);
        assertEquals(researchPublicationList4, teacherTransfers);
        assertEquals(paperPresentedList4, teacherTransfers);
        assertEquals(teacherAppointmentList4, teacherTransfers);
        assertEquals(facultyProgramList1, teacherTransfers);
        assertEquals(teacherApprovalList5, teacherTransfers);
        assertEquals(teacherTransferList5, teacherTransfers);
        assertEquals(bookPublicationList5, teacherTransfers);
        assertEquals(researchPublicationList5, teacherTransfers);
        assertEquals(paperPresentedList5, teacherTransfers);
        assertEquals(teacherAppointmentList5, teacherTransfers);
        assertEquals(facultySeminarList1, teacherTransfers);
        assertEquals(teacherApprovalList6, teacherTransfers);
        assertEquals(teacherTransferList6, teacherTransfers);
        assertEquals(bookPublicationList6, teacherTransfers);
        assertEquals(researchPublicationList6, teacherTransfers);
        assertEquals(paperPresentedList6, teacherTransfers);
        assertEquals(teacherAppointmentList6, teacherTransfers);
        assertEquals(facultySeminarList2, teacherTransfers);
        assertEquals(courseList, teacherTransfers);
        assertEquals(admittedStudentList, teacherTransfers);
        assertEquals(programList, teacherTransfers);
        assertEquals(teacherApprovalList7, teacherTransfers);
        assertEquals(teacherTransferList7, teacherTransfers);
        assertEquals(bookPublicationList7, teacherTransfers);
        assertEquals(researchPublicationList7, teacherTransfers);
        assertEquals(paperPresentedList7, teacherTransfers);
        assertEquals(teacherAppointmentList7, teacherTransfers);
        assertEquals(facultyProgramList3, teacherTransfers);
        assertEquals(teacherApprovalList8, teacherTransfers);
        assertEquals(teacherTransferList8, teacherTransfers);
        assertEquals(bookPublicationList8, teacherTransfers);
        assertEquals(researchPublicationList8, teacherTransfers);
        assertEquals(paperPresentedList8, teacherTransfers);
        assertEquals(teacherAppointmentList8, teacherTransfers);
        assertEquals(facultySeminarList3, teacherTransfers);
        assertEquals(bookPublications, teacherTransfers);
        assertEquals(paperPresentedList9, teacherTransfers);
        assertEquals(researchPublications, teacherTransfers);
        assertEquals(teacherAppointments, teacherTransfers);
        assertEquals(teacherApprovals, teacherTransfers);
        assertSame(ugQualification, actualHod.getUgQualification());
        assertSame(user3, actualHod.getUser());
    }

    @Test
    void testConstructor2() {
        User user = new User();
        UGQualification ugQualification = new UGQualification();
        PGQualification pgQualification = new PGQualification();
        EntranceQualification entranceQualification = new EntranceQualification();
        ResearchQualification researchQualification = new ResearchQualification();
        ArrayList<TeacherAppointment> teacherAppointmentList = new ArrayList<TeacherAppointment>();
        ArrayList<TeacherApproval> teacherApprovalList = new ArrayList<TeacherApproval>();
        ArrayList<TeacherTransfer> teacherTransferList = new ArrayList<TeacherTransfer>();
        ArrayList<PaperPresented> paperPresentedList = new ArrayList<PaperPresented>();
        ArrayList<ResearchPublication> researchPublicationList = new ArrayList<ResearchPublication>();
        ArrayList<BookPublication> bookPublicationList = new ArrayList<BookPublication>();
        Hod actualHod = new Hod(123L, user, "42", "Aadhar Document", "42", "Pan Document", ugQualification, pgQualification,
                entranceQualification, researchQualification, teacherAppointmentList, teacherApprovalList, teacherTransferList,
                paperPresentedList, researchPublicationList, bookPublicationList);
        actualHod.setAadharDocument("Aadhar Document");
        actualHod.setAadharNumber("42");
        ArrayList<BookPublication> bookPublicationList1 = new ArrayList<BookPublication>();
        actualHod.setBookPublications(bookPublicationList1);
        EntranceQualification entranceQualification1 = new EntranceQualification();
        entranceQualification1.setSubject("Hello from the Dreaming Spires");
        entranceQualification1.setUniversity("University");
        entranceQualification1.setId(123L);
        entranceQualification1.setName("Name");
        LocalDateTime atStartOfDayResult = LocalDate.of(1970, 1, 1).atStartOfDay();
        entranceQualification1.setYearOfPassing(Date.from(atStartOfDayResult.atZone(ZoneId.of("UTC")).toInstant()));
        actualHod.setEntranceQualification(entranceQualification1);
        actualHod.setId(123L);
        actualHod.setPanDocument("Pan Document");
        actualHod.setPanNumber("42");
        ArrayList<PaperPresented> paperPresentedList1 = new ArrayList<PaperPresented>();
        actualHod.setPaperPresentedList(paperPresentedList1);
        PGQualification pgQualification1 = new PGQualification();
        pgQualification1.setDocument("Document");
        pgQualification1.setUniversity("University");
        pgQualification1.setSpecialization("Specialization");
        pgQualification1.setId(123L);
        pgQualification1.setDegree("Degree");
        pgQualification1.setGrade("Grade");
        LocalDateTime atStartOfDayResult1 = LocalDate.of(1970, 1, 1).atStartOfDay();
        pgQualification1.setYearOfPassing(Date.from(atStartOfDayResult1.atZone(ZoneId.of("UTC")).toInstant()));
        actualHod.setPgQualification(pgQualification1);
        ArrayList<ResearchPublication> researchPublicationList1 = new ArrayList<ResearchPublication>();
        actualHod.setResearchPublications(researchPublicationList1);
        ResearchQualification researchQualification1 = new ResearchQualification();
        researchQualification1.setSubject("Hello from the Dreaming Spires");
        researchQualification1.setUniversity("University");
        researchQualification1.setId(123L);
        researchQualification1.setDegree("Degree");
        LocalDateTime atStartOfDayResult2 = LocalDate.of(1970, 1, 1).atStartOfDay();
        researchQualification1.setDateOfDeclaration(Date.from(atStartOfDayResult2.atZone(ZoneId.of("UTC")).toInstant()));
        actualHod.setResearchQualification(researchQualification1);
        ArrayList<TeacherAppointment> teacherAppointmentList1 = new ArrayList<TeacherAppointment>();
        actualHod.setTeacherAppointments(teacherAppointmentList1);
        ArrayList<TeacherApproval> teacherApprovalList1 = new ArrayList<TeacherApproval>();
        actualHod.setTeacherApprovals(teacherApprovalList1);
        ArrayList<TeacherTransfer> teacherTransferList1 = new ArrayList<TeacherTransfer>();
        actualHod.setTeacherTransfers(teacherTransferList1);
        UGQualification ugQualification1 = new UGQualification();
        ugQualification1.setDocument("Document");
        ugQualification1.setUniversity("University");
        ugQualification1.setSpecialization("Specialization");
        ugQualification1.setId(123L);
        ugQualification1.setDegree("Degree");
        ugQualification1.setGrade("Grade");
        LocalDateTime atStartOfDayResult3 = LocalDate.of(1970, 1, 1).atStartOfDay();
        ugQualification1.setYearOfPassing(Date.from(atStartOfDayResult3.atZone(ZoneId.of("UTC")).toInstant()));
        actualHod.setUgQualification(ugQualification1);
        ResearchQualification researchQualification2 = new ResearchQualification();
        researchQualification2.setSubject("Hello from the Dreaming Spires");
        researchQualification2.setUniversity("University");
        researchQualification2.setId(123L);
        researchQualification2.setDegree("Degree");
        LocalDateTime atStartOfDayResult4 = LocalDate.of(1970, 1, 1).atStartOfDay();
        researchQualification2.setDateOfDeclaration(Date.from(atStartOfDayResult4.atZone(ZoneId.of("UTC")).toInstant()));
        Hod hod = new Hod();
        hod.setResearchQualification(new ResearchQualification());
        hod.setUser(new User());
        ArrayList<TeacherApproval> teacherApprovalList2 = new ArrayList<TeacherApproval>();
        hod.setTeacherApprovals(teacherApprovalList2);
        hod.setEntranceQualification(new EntranceQualification());
        hod.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList2 = new ArrayList<TeacherTransfer>();
        hod.setTeacherTransfers(teacherTransferList2);
        ArrayList<BookPublication> bookPublicationList2 = new ArrayList<BookPublication>();
        hod.setBookPublications(bookPublicationList2);
        ArrayList<ResearchPublication> researchPublicationList2 = new ArrayList<ResearchPublication>();
        hod.setResearchPublications(researchPublicationList2);
        ArrayList<PaperPresented> paperPresentedList2 = new ArrayList<PaperPresented>();
        hod.setPaperPresentedList(paperPresentedList2);
        hod.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList2 = new ArrayList<TeacherAppointment>();
        hod.setTeacherAppointments(teacherAppointmentList2);
        hod.setId(123L);
        hod.setUgQualification(new UGQualification());
        hod.setPanNumber("42");
        hod.setAadharNumber("42");
        hod.setPgQualification(new PGQualification());
        Role role = new Role();
        role.setRoleName(RoleName.Admin);
        role.setId(123L);
        Teacher teacher = new Teacher();
        teacher.setResearchQualification(new ResearchQualification());
        ArrayList<FacultyProgram> facultyProgramList = new ArrayList<FacultyProgram>();
        teacher.setFacultyPrograms(facultyProgramList);
        teacher.setUser(new User());
        ArrayList<TeacherApproval> teacherApprovalList3 = new ArrayList<TeacherApproval>();
        teacher.setTeacherApprovals(teacherApprovalList3);
        teacher.setEntranceQualification(new EntranceQualification());
        teacher.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList3 = new ArrayList<TeacherTransfer>();
        teacher.setTeacherTransfers(teacherTransferList3);
        ArrayList<BookPublication> bookPublicationList3 = new ArrayList<BookPublication>();
        teacher.setBookPublications(bookPublicationList3);
        ArrayList<ResearchPublication> researchPublicationList3 = new ArrayList<ResearchPublication>();
        teacher.setResearchPublications(researchPublicationList3);
        teacher.setTeacherId(123L);
        ArrayList<PaperPresented> paperPresentedList3 = new ArrayList<PaperPresented>();
        teacher.setPaperPresentedList(paperPresentedList3);
        teacher.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList3 = new ArrayList<TeacherAppointment>();
        teacher.setTeacherAppointments(teacherAppointmentList3);
        teacher.setUgQualification(new UGQualification());
        teacher.setPanNumber("42");
        teacher.setAadharNumber("42");
        ArrayList<FacultySeminar> facultySeminarList = new ArrayList<FacultySeminar>();
        teacher.setFacultySeminars(facultySeminarList);
        teacher.setPgQualification(new PGQualification());
        Student student = new Student();
        student.setProgram(new Program());
        student.setFatherName("Father Name");
        student.setReligion("Religion");
        student.setUser(new User());
        student.setPanDocument("Pan Document");
        student.setTenthMarks(10.0);
        student.setTwelthMarks(10.0);
        student.setStudentId(123L);
        student.setMotherName("Mother Name");
        student.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult5 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student.setStartDate(Date.from(atStartOfDayResult5.atZone(ZoneId.of("UTC")).toInstant()));
        student.setAadharDocument("Aadhar Document");
        student.setPanNumber("42");
        student.setAadharNumber("42");
        LocalDateTime atStartOfDayResult6 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student.setCompletionDate(Date.from(atStartOfDayResult6.atZone(ZoneId.of("UTC")).toInstant()));
        student.setMotherPhoneNumber("4105551212");
        student.setCast("Cast");
        User user1 = new User();
        user1.setLastName("Doe");
        user1.setEmail("jane.doe@example.org");
        user1.setPassword("iloveyou");
        user1.setHod(hod);
        user1.setRole(role);
        user1.setUserId(123L);
        LocalDateTime atStartOfDayResult7 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user1.setCreatedAt(Date.from(atStartOfDayResult7.atZone(ZoneId.of("UTC")).toInstant()));
        user1.setMiddleName("Middle Name");
        user1.setFirstName("Jane");
        LocalDateTime atStartOfDayResult8 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user1.setDob(Date.from(atStartOfDayResult8.atZone(ZoneId.of("UTC")).toInstant()));
        user1.setTeacher(teacher);
        user1.setGender("Gender");
        user1.setStudent(student);
        user1.setPhone("4105551212");
        EntranceQualification entranceQualification2 = new EntranceQualification();
        entranceQualification2.setSubject("Hello from the Dreaming Spires");
        entranceQualification2.setUniversity("University");
        entranceQualification2.setId(123L);
        entranceQualification2.setName("Name");
        LocalDateTime atStartOfDayResult9 = LocalDate.of(1970, 1, 1).atStartOfDay();
        entranceQualification2.setYearOfPassing(Date.from(atStartOfDayResult9.atZone(ZoneId.of("UTC")).toInstant()));
        UGQualification ugQualification2 = new UGQualification();
        ugQualification2.setDocument("Document");
        ugQualification2.setUniversity("University");
        ugQualification2.setSpecialization("Specialization");
        ugQualification2.setId(123L);
        ugQualification2.setDegree("Degree");
        ugQualification2.setGrade("Grade");
        LocalDateTime atStartOfDayResult10 = LocalDate.of(1970, 1, 1).atStartOfDay();
        ugQualification2.setYearOfPassing(Date.from(atStartOfDayResult10.atZone(ZoneId.of("UTC")).toInstant()));
        PGQualification pgQualification2 = new PGQualification();
        pgQualification2.setDocument("Document");
        pgQualification2.setUniversity("University");
        pgQualification2.setSpecialization("Specialization");
        pgQualification2.setId(123L);
        pgQualification2.setDegree("Degree");
        pgQualification2.setGrade("Grade");
        LocalDateTime atStartOfDayResult11 = LocalDate.of(1970, 1, 1).atStartOfDay();
        pgQualification2.setYearOfPassing(Date.from(atStartOfDayResult11.atZone(ZoneId.of("UTC")).toInstant()));
        Hod hod1 = new Hod();
        hod1.setResearchQualification(researchQualification2);
        hod1.setUser(user1);
        ArrayList<TeacherApproval> teacherApprovalList4 = new ArrayList<TeacherApproval>();
        hod1.setTeacherApprovals(teacherApprovalList4);
        hod1.setEntranceQualification(entranceQualification2);
        hod1.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList4 = new ArrayList<TeacherTransfer>();
        hod1.setTeacherTransfers(teacherTransferList4);
        ArrayList<BookPublication> bookPublicationList4 = new ArrayList<BookPublication>();
        hod1.setBookPublications(bookPublicationList4);
        ArrayList<ResearchPublication> researchPublicationList4 = new ArrayList<ResearchPublication>();
        hod1.setResearchPublications(researchPublicationList4);
        ArrayList<PaperPresented> paperPresentedList4 = new ArrayList<PaperPresented>();
        hod1.setPaperPresentedList(paperPresentedList4);
        hod1.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList4 = new ArrayList<TeacherAppointment>();
        hod1.setTeacherAppointments(teacherAppointmentList4);
        hod1.setId(123L);
        hod1.setUgQualification(ugQualification2);
        hod1.setPanNumber("42");
        hod1.setAadharNumber("42");
        hod1.setPgQualification(pgQualification2);
        Role role1 = new Role();
        role1.setRoleName(RoleName.Admin);
        role1.setId(123L);
        ResearchQualification researchQualification3 = new ResearchQualification();
        researchQualification3.setSubject("Hello from the Dreaming Spires");
        researchQualification3.setUniversity("University");
        researchQualification3.setId(123L);
        researchQualification3.setDegree("Degree");
        LocalDateTime atStartOfDayResult12 = LocalDate.of(1970, 1, 1).atStartOfDay();
        researchQualification3.setDateOfDeclaration(Date.from(atStartOfDayResult12.atZone(ZoneId.of("UTC")).toInstant()));
        Hod hod2 = new Hod();
        hod2.setResearchQualification(new ResearchQualification());
        hod2.setUser(new User());
        ArrayList<TeacherApproval> teacherApprovalList5 = new ArrayList<TeacherApproval>();
        hod2.setTeacherApprovals(teacherApprovalList5);
        hod2.setEntranceQualification(new EntranceQualification());
        hod2.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList5 = new ArrayList<TeacherTransfer>();
        hod2.setTeacherTransfers(teacherTransferList5);
        ArrayList<BookPublication> bookPublicationList5 = new ArrayList<BookPublication>();
        hod2.setBookPublications(bookPublicationList5);
        ArrayList<ResearchPublication> researchPublicationList5 = new ArrayList<ResearchPublication>();
        hod2.setResearchPublications(researchPublicationList5);
        ArrayList<PaperPresented> paperPresentedList5 = new ArrayList<PaperPresented>();
        hod2.setPaperPresentedList(paperPresentedList5);
        hod2.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList5 = new ArrayList<TeacherAppointment>();
        hod2.setTeacherAppointments(teacherAppointmentList5);
        hod2.setId(123L);
        hod2.setUgQualification(new UGQualification());
        hod2.setPanNumber("42");
        hod2.setAadharNumber("42");
        hod2.setPgQualification(new PGQualification());
        Role role2 = new Role();
        role2.setRoleName(RoleName.Admin);
        role2.setId(123L);
        Teacher teacher1 = new Teacher();
        teacher1.setResearchQualification(new ResearchQualification());
        ArrayList<FacultyProgram> facultyProgramList1 = new ArrayList<FacultyProgram>();
        teacher1.setFacultyPrograms(facultyProgramList1);
        teacher1.setUser(new User());
        ArrayList<TeacherApproval> teacherApprovalList6 = new ArrayList<TeacherApproval>();
        teacher1.setTeacherApprovals(teacherApprovalList6);
        teacher1.setEntranceQualification(new EntranceQualification());
        teacher1.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList6 = new ArrayList<TeacherTransfer>();
        teacher1.setTeacherTransfers(teacherTransferList6);
        ArrayList<BookPublication> bookPublicationList6 = new ArrayList<BookPublication>();
        teacher1.setBookPublications(bookPublicationList6);
        ArrayList<ResearchPublication> researchPublicationList6 = new ArrayList<ResearchPublication>();
        teacher1.setResearchPublications(researchPublicationList6);
        teacher1.setTeacherId(123L);
        ArrayList<PaperPresented> paperPresentedList6 = new ArrayList<PaperPresented>();
        teacher1.setPaperPresentedList(paperPresentedList6);
        teacher1.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList6 = new ArrayList<TeacherAppointment>();
        teacher1.setTeacherAppointments(teacherAppointmentList6);
        teacher1.setUgQualification(new UGQualification());
        teacher1.setPanNumber("42");
        teacher1.setAadharNumber("42");
        ArrayList<FacultySeminar> facultySeminarList1 = new ArrayList<FacultySeminar>();
        teacher1.setFacultySeminars(facultySeminarList1);
        teacher1.setPgQualification(new PGQualification());
        Student student1 = new Student();
        student1.setProgram(new Program());
        student1.setFatherName("Father Name");
        student1.setReligion("Religion");
        student1.setUser(new User());
        student1.setPanDocument("Pan Document");
        student1.setTenthMarks(10.0);
        student1.setTwelthMarks(10.0);
        student1.setStudentId(123L);
        student1.setMotherName("Mother Name");
        student1.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult13 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student1.setStartDate(Date.from(atStartOfDayResult13.atZone(ZoneId.of("UTC")).toInstant()));
        student1.setAadharDocument("Aadhar Document");
        student1.setPanNumber("42");
        student1.setAadharNumber("42");
        LocalDateTime atStartOfDayResult14 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student1.setCompletionDate(Date.from(atStartOfDayResult14.atZone(ZoneId.of("UTC")).toInstant()));
        student1.setMotherPhoneNumber("4105551212");
        student1.setCast("Cast");
        User user2 = new User();
        user2.setLastName("Doe");
        user2.setEmail("jane.doe@example.org");
        user2.setPassword("iloveyou");
        user2.setHod(hod2);
        user2.setRole(role2);
        user2.setUserId(123L);
        LocalDateTime atStartOfDayResult15 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user2.setCreatedAt(Date.from(atStartOfDayResult15.atZone(ZoneId.of("UTC")).toInstant()));
        user2.setMiddleName("Middle Name");
        user2.setFirstName("Jane");
        LocalDateTime atStartOfDayResult16 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user2.setDob(Date.from(atStartOfDayResult16.atZone(ZoneId.of("UTC")).toInstant()));
        user2.setTeacher(teacher1);
        user2.setGender("Gender");
        user2.setStudent(student1);
        user2.setPhone("4105551212");
        EntranceQualification entranceQualification3 = new EntranceQualification();
        entranceQualification3.setSubject("Hello from the Dreaming Spires");
        entranceQualification3.setUniversity("University");
        entranceQualification3.setId(123L);
        entranceQualification3.setName("Name");
        LocalDateTime atStartOfDayResult17 = LocalDate.of(1970, 1, 1).atStartOfDay();
        entranceQualification3.setYearOfPassing(Date.from(atStartOfDayResult17.atZone(ZoneId.of("UTC")).toInstant()));
        UGQualification ugQualification3 = new UGQualification();
        ugQualification3.setDocument("Document");
        ugQualification3.setUniversity("University");
        ugQualification3.setSpecialization("Specialization");
        ugQualification3.setId(123L);
        ugQualification3.setDegree("Degree");
        ugQualification3.setGrade("Grade");
        LocalDateTime atStartOfDayResult18 = LocalDate.of(1970, 1, 1).atStartOfDay();
        ugQualification3.setYearOfPassing(Date.from(atStartOfDayResult18.atZone(ZoneId.of("UTC")).toInstant()));
        PGQualification pgQualification3 = new PGQualification();
        pgQualification3.setDocument("Document");
        pgQualification3.setUniversity("University");
        pgQualification3.setSpecialization("Specialization");
        pgQualification3.setId(123L);
        pgQualification3.setDegree("Degree");
        pgQualification3.setGrade("Grade");
        LocalDateTime atStartOfDayResult19 = LocalDate.of(1970, 1, 1).atStartOfDay();
        pgQualification3.setYearOfPassing(Date.from(atStartOfDayResult19.atZone(ZoneId.of("UTC")).toInstant()));
        Teacher teacher2 = new Teacher();
        teacher2.setResearchQualification(researchQualification3);
        ArrayList<FacultyProgram> facultyProgramList2 = new ArrayList<FacultyProgram>();
        teacher2.setFacultyPrograms(facultyProgramList2);
        teacher2.setUser(user2);
        ArrayList<TeacherApproval> teacherApprovalList7 = new ArrayList<TeacherApproval>();
        teacher2.setTeacherApprovals(teacherApprovalList7);
        teacher2.setEntranceQualification(entranceQualification3);
        teacher2.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList7 = new ArrayList<TeacherTransfer>();
        teacher2.setTeacherTransfers(teacherTransferList7);
        ArrayList<BookPublication> bookPublicationList7 = new ArrayList<BookPublication>();
        teacher2.setBookPublications(bookPublicationList7);
        ArrayList<ResearchPublication> researchPublicationList7 = new ArrayList<ResearchPublication>();
        teacher2.setResearchPublications(researchPublicationList7);
        teacher2.setTeacherId(123L);
        ArrayList<PaperPresented> paperPresentedList7 = new ArrayList<PaperPresented>();
        teacher2.setPaperPresentedList(paperPresentedList7);
        teacher2.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList7 = new ArrayList<TeacherAppointment>();
        teacher2.setTeacherAppointments(teacherAppointmentList7);
        teacher2.setUgQualification(ugQualification3);
        teacher2.setPanNumber("42");
        teacher2.setAadharNumber("42");
        ArrayList<FacultySeminar> facultySeminarList2 = new ArrayList<FacultySeminar>();
        teacher2.setFacultySeminars(facultySeminarList2);
        teacher2.setPgQualification(pgQualification3);
        Department department = new Department();
        department.setId(123L);
        department.setDepartmentName("Department Name");
        ArrayList<Program> programList = new ArrayList<Program>();
        department.setPrograms(programList);
        department.setEstablishmentYear("Establishment Year");
        Program program = new Program();
        program.setProgramCode("Program Code");
        program.setProgramName("Program Name");
        ArrayList<Course> courseList = new ArrayList<Course>();
        program.setCourses(courseList);
        program.setProgramId(123L);
        program.setStartYear("Start Year");
        ArrayList<AdmittedStudent> admittedStudentList = new ArrayList<AdmittedStudent>();
        program.setAdmittedStudents(admittedStudentList);
        program.setDepartment(department);
        program.setProgramType("Program Type");
        Hod hod3 = new Hod();
        hod3.setResearchQualification(new ResearchQualification());
        hod3.setUser(new User());
        ArrayList<TeacherApproval> teacherApprovalList8 = new ArrayList<TeacherApproval>();
        hod3.setTeacherApprovals(teacherApprovalList8);
        hod3.setEntranceQualification(new EntranceQualification());
        hod3.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList8 = new ArrayList<TeacherTransfer>();
        hod3.setTeacherTransfers(teacherTransferList8);
        ArrayList<BookPublication> bookPublicationList8 = new ArrayList<BookPublication>();
        hod3.setBookPublications(bookPublicationList8);
        ArrayList<ResearchPublication> researchPublicationList8 = new ArrayList<ResearchPublication>();
        hod3.setResearchPublications(researchPublicationList8);
        ArrayList<PaperPresented> paperPresentedList8 = new ArrayList<PaperPresented>();
        hod3.setPaperPresentedList(paperPresentedList8);
        hod3.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList8 = new ArrayList<TeacherAppointment>();
        hod3.setTeacherAppointments(teacherAppointmentList8);
        hod3.setId(123L);
        hod3.setUgQualification(new UGQualification());
        hod3.setPanNumber("42");
        hod3.setAadharNumber("42");
        hod3.setPgQualification(new PGQualification());
        Role role3 = new Role();
        role3.setRoleName(RoleName.Admin);
        role3.setId(123L);
        Teacher teacher3 = new Teacher();
        teacher3.setResearchQualification(new ResearchQualification());
        ArrayList<FacultyProgram> facultyProgramList3 = new ArrayList<FacultyProgram>();
        teacher3.setFacultyPrograms(facultyProgramList3);
        teacher3.setUser(new User());
        ArrayList<TeacherApproval> teacherApprovalList9 = new ArrayList<TeacherApproval>();
        teacher3.setTeacherApprovals(teacherApprovalList9);
        teacher3.setEntranceQualification(new EntranceQualification());
        teacher3.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList9 = new ArrayList<TeacherTransfer>();
        teacher3.setTeacherTransfers(teacherTransferList9);
        ArrayList<BookPublication> bookPublicationList9 = new ArrayList<BookPublication>();
        teacher3.setBookPublications(bookPublicationList9);
        ArrayList<ResearchPublication> researchPublicationList9 = new ArrayList<ResearchPublication>();
        teacher3.setResearchPublications(researchPublicationList9);
        teacher3.setTeacherId(123L);
        ArrayList<PaperPresented> paperPresentedList9 = new ArrayList<PaperPresented>();
        teacher3.setPaperPresentedList(paperPresentedList9);
        teacher3.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList9 = new ArrayList<TeacherAppointment>();
        teacher3.setTeacherAppointments(teacherAppointmentList9);
        teacher3.setUgQualification(new UGQualification());
        teacher3.setPanNumber("42");
        teacher3.setAadharNumber("42");
        ArrayList<FacultySeminar> facultySeminarList3 = new ArrayList<FacultySeminar>();
        teacher3.setFacultySeminars(facultySeminarList3);
        teacher3.setPgQualification(new PGQualification());
        Student student2 = new Student();
        student2.setProgram(new Program());
        student2.setFatherName("Father Name");
        student2.setReligion("Religion");
        student2.setUser(new User());
        student2.setPanDocument("Pan Document");
        student2.setTenthMarks(10.0);
        student2.setTwelthMarks(10.0);
        student2.setStudentId(123L);
        student2.setMotherName("Mother Name");
        student2.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult20 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student2.setStartDate(Date.from(atStartOfDayResult20.atZone(ZoneId.of("UTC")).toInstant()));
        student2.setAadharDocument("Aadhar Document");
        student2.setPanNumber("42");
        student2.setAadharNumber("42");
        LocalDateTime atStartOfDayResult21 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student2.setCompletionDate(Date.from(atStartOfDayResult21.atZone(ZoneId.of("UTC")).toInstant()));
        student2.setMotherPhoneNumber("4105551212");
        student2.setCast("Cast");
        User user3 = new User();
        user3.setLastName("Doe");
        user3.setEmail("jane.doe@example.org");
        user3.setPassword("iloveyou");
        user3.setHod(hod3);
        user3.setRole(role3);
        user3.setUserId(123L);
        LocalDateTime atStartOfDayResult22 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user3.setCreatedAt(Date.from(atStartOfDayResult22.atZone(ZoneId.of("UTC")).toInstant()));
        user3.setMiddleName("Middle Name");
        user3.setFirstName("Jane");
        LocalDateTime atStartOfDayResult23 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user3.setDob(Date.from(atStartOfDayResult23.atZone(ZoneId.of("UTC")).toInstant()));
        user3.setTeacher(teacher3);
        user3.setGender("Gender");
        user3.setStudent(student2);
        user3.setPhone("4105551212");
        Student student3 = new Student();
        student3.setProgram(program);
        student3.setFatherName("Father Name");
        student3.setReligion("Religion");
        student3.setUser(user3);
        student3.setPanDocument("Pan Document");
        student3.setTenthMarks(10.0);
        student3.setTwelthMarks(10.0);
        student3.setStudentId(123L);
        student3.setMotherName("Mother Name");
        student3.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult24 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student3.setStartDate(Date.from(atStartOfDayResult24.atZone(ZoneId.of("UTC")).toInstant()));
        student3.setAadharDocument("Aadhar Document");
        student3.setPanNumber("42");
        student3.setAadharNumber("42");
        LocalDateTime atStartOfDayResult25 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student3.setCompletionDate(Date.from(atStartOfDayResult25.atZone(ZoneId.of("UTC")).toInstant()));
        student3.setMotherPhoneNumber("4105551212");
        student3.setCast("Cast");
        User user4 = new User();
        user4.setLastName("Doe");
        user4.setEmail("jane.doe@example.org");
        user4.setPassword("iloveyou");
        user4.setHod(hod1);
        user4.setRole(role1);
        user4.setUserId(123L);
        LocalDateTime atStartOfDayResult26 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user4.setCreatedAt(Date.from(atStartOfDayResult26.atZone(ZoneId.of("UTC")).toInstant()));
        user4.setMiddleName("Middle Name");
        user4.setFirstName("Jane");
        LocalDateTime atStartOfDayResult27 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user4.setDob(Date.from(atStartOfDayResult27.atZone(ZoneId.of("UTC")).toInstant()));
        user4.setTeacher(teacher2);
        user4.setGender("Gender");
        user4.setStudent(student3);
        user4.setPhone("4105551212");
        actualHod.setUser(user4);
        assertEquals("Aadhar Document", actualHod.getAadharDocument());
        assertEquals("42", actualHod.getAadharNumber());
        List<BookPublication> bookPublications = actualHod.getBookPublications();
        assertSame(bookPublicationList1, bookPublications);
        assertEquals(teacherAppointmentList, bookPublications);
        assertEquals(teacherApprovalList, bookPublications);
        assertEquals(teacherTransferList, bookPublications);
        assertEquals(paperPresentedList, bookPublications);
        assertEquals(researchPublicationList, bookPublications);
        assertEquals(bookPublicationList, bookPublications);
        assertEquals(teacherAppointmentList1, bookPublications);
        assertEquals(teacherApprovalList1, bookPublications);
        assertEquals(teacherTransferList1, bookPublications);
        assertEquals(teacherApprovalList2, bookPublications);
        assertEquals(teacherTransferList2, bookPublications);
        assertEquals(bookPublicationList2, bookPublications);
        assertEquals(researchPublicationList2, bookPublications);
        assertEquals(paperPresentedList2, bookPublications);
        assertEquals(teacherAppointmentList2, bookPublications);
        assertEquals(facultyProgramList, bookPublications);
        assertEquals(teacherApprovalList3, bookPublications);
        assertEquals(teacherTransferList3, bookPublications);
        assertEquals(bookPublicationList3, bookPublications);
        assertEquals(researchPublicationList3, bookPublications);
        assertEquals(paperPresentedList3, bookPublications);
        assertEquals(teacherAppointmentList3, bookPublications);
        assertEquals(facultySeminarList, bookPublications);
        assertEquals(teacherApprovalList4, bookPublications);
        assertEquals(teacherTransferList4, bookPublications);
        assertEquals(bookPublicationList4, bookPublications);
        assertEquals(researchPublicationList4, bookPublications);
        assertEquals(paperPresentedList4, bookPublications);
        assertEquals(teacherAppointmentList4, bookPublications);
        assertEquals(facultyProgramList2, bookPublications);
        assertEquals(teacherApprovalList5, bookPublications);
        assertEquals(teacherTransferList5, bookPublications);
        assertEquals(bookPublicationList5, bookPublications);
        assertEquals(researchPublicationList5, bookPublications);
        assertEquals(paperPresentedList5, bookPublications);
        assertEquals(teacherAppointmentList5, bookPublications);
        assertEquals(facultyProgramList1, bookPublications);
        assertEquals(teacherApprovalList6, bookPublications);
        assertEquals(teacherTransferList6, bookPublications);
        assertEquals(bookPublicationList6, bookPublications);
        assertEquals(researchPublicationList6, bookPublications);
        assertEquals(paperPresentedList6, bookPublications);
        assertEquals(teacherAppointmentList6, bookPublications);
        assertEquals(facultySeminarList1, bookPublications);
        assertEquals(teacherApprovalList7, bookPublications);
        assertEquals(teacherTransferList7, bookPublications);
        assertEquals(bookPublicationList7, bookPublications);
        assertEquals(researchPublicationList7, bookPublications);
        assertEquals(paperPresentedList7, bookPublications);
        assertEquals(teacherAppointmentList7, bookPublications);
        assertEquals(facultySeminarList2, bookPublications);
        assertEquals(courseList, bookPublications);
        assertEquals(admittedStudentList, bookPublications);
        assertEquals(programList, bookPublications);
        assertEquals(teacherApprovalList8, bookPublications);
        assertEquals(teacherTransferList8, bookPublications);
        assertEquals(bookPublicationList8, bookPublications);
        assertEquals(researchPublicationList8, bookPublications);
        assertEquals(paperPresentedList8, bookPublications);
        assertEquals(teacherAppointmentList8, bookPublications);
        assertEquals(facultyProgramList3, bookPublications);
        assertEquals(teacherApprovalList9, bookPublications);
        assertEquals(teacherTransferList9, bookPublications);
        assertEquals(bookPublicationList9, bookPublications);
        assertEquals(researchPublicationList9, bookPublications);
        assertEquals(paperPresentedList9, bookPublications);
        assertEquals(teacherAppointmentList9, bookPublications);
        assertEquals(facultySeminarList3, bookPublications);
        List<PaperPresented> paperPresentedList10 = actualHod.getPaperPresentedList();
        assertEquals(paperPresentedList10, bookPublications);
        List<ResearchPublication> researchPublications = actualHod.getResearchPublications();
        assertEquals(researchPublications, bookPublications);
        assertSame(entranceQualification1, actualHod.getEntranceQualification());
        assertEquals(123L, actualHod.getId().longValue());
        assertEquals("Pan Document", actualHod.getPanDocument());
        assertEquals("42", actualHod.getPanNumber());
        assertSame(paperPresentedList1, paperPresentedList10);
        assertEquals(teacherAppointmentList, paperPresentedList10);
        assertEquals(teacherApprovalList, paperPresentedList10);
        assertEquals(teacherTransferList, paperPresentedList10);
        assertEquals(paperPresentedList, paperPresentedList10);
        assertEquals(researchPublicationList, paperPresentedList10);
        assertEquals(bookPublicationList, paperPresentedList10);
        assertEquals(bookPublicationList1, paperPresentedList10);
        assertEquals(researchPublicationList1, paperPresentedList10);
        assertEquals(teacherAppointmentList1, paperPresentedList10);
        assertEquals(teacherApprovalList1, paperPresentedList10);
        assertEquals(teacherTransferList1, paperPresentedList10);
        assertEquals(teacherApprovalList2, paperPresentedList10);
        assertEquals(teacherTransferList2, paperPresentedList10);
        assertEquals(bookPublicationList2, paperPresentedList10);
        assertEquals(researchPublicationList2, paperPresentedList10);
        assertEquals(paperPresentedList2, paperPresentedList10);
        assertEquals(teacherAppointmentList2, paperPresentedList10);
        assertEquals(facultyProgramList, paperPresentedList10);
        assertEquals(teacherApprovalList3, paperPresentedList10);
        assertEquals(teacherTransferList3, paperPresentedList10);
        assertEquals(bookPublicationList3, paperPresentedList10);
        assertEquals(researchPublicationList3, paperPresentedList10);
        assertEquals(paperPresentedList3, paperPresentedList10);
        assertEquals(teacherAppointmentList3, paperPresentedList10);
        assertEquals(facultySeminarList, paperPresentedList10);
        assertEquals(teacherApprovalList4, paperPresentedList10);
        assertEquals(teacherTransferList4, paperPresentedList10);
        assertEquals(bookPublicationList4, paperPresentedList10);
        assertEquals(researchPublicationList4, paperPresentedList10);
        assertEquals(paperPresentedList4, paperPresentedList10);
        assertEquals(teacherAppointmentList4, paperPresentedList10);
        assertEquals(facultyProgramList2, paperPresentedList10);
        assertEquals(teacherApprovalList5, paperPresentedList10);
        assertEquals(teacherTransferList5, paperPresentedList10);
        assertEquals(bookPublicationList5, paperPresentedList10);
        assertEquals(researchPublicationList5, paperPresentedList10);
        assertEquals(paperPresentedList5, paperPresentedList10);
        assertEquals(teacherAppointmentList5, paperPresentedList10);
        assertEquals(facultyProgramList1, paperPresentedList10);
        assertEquals(teacherApprovalList6, paperPresentedList10);
        assertEquals(teacherTransferList6, paperPresentedList10);
        assertEquals(bookPublicationList6, paperPresentedList10);
        assertEquals(researchPublicationList6, paperPresentedList10);
        assertEquals(paperPresentedList6, paperPresentedList10);
        assertEquals(teacherAppointmentList6, paperPresentedList10);
        assertEquals(facultySeminarList1, paperPresentedList10);
        assertEquals(teacherApprovalList7, paperPresentedList10);
        assertEquals(teacherTransferList7, paperPresentedList10);
        assertEquals(bookPublicationList7, paperPresentedList10);
        assertEquals(researchPublicationList7, paperPresentedList10);
        assertEquals(paperPresentedList7, paperPresentedList10);
        assertEquals(teacherAppointmentList7, paperPresentedList10);
        assertEquals(facultySeminarList2, paperPresentedList10);
        assertEquals(courseList, paperPresentedList10);
        assertEquals(admittedStudentList, paperPresentedList10);
        assertEquals(programList, paperPresentedList10);
        assertEquals(teacherApprovalList8, paperPresentedList10);
        assertEquals(teacherTransferList8, paperPresentedList10);
        assertEquals(bookPublicationList8, paperPresentedList10);
        assertEquals(researchPublicationList8, paperPresentedList10);
        assertEquals(paperPresentedList8, paperPresentedList10);
        assertEquals(teacherAppointmentList8, paperPresentedList10);
        assertEquals(facultyProgramList3, paperPresentedList10);
        assertEquals(teacherApprovalList9, paperPresentedList10);
        assertEquals(teacherTransferList9, paperPresentedList10);
        assertEquals(bookPublicationList9, paperPresentedList10);
        assertEquals(researchPublicationList9, paperPresentedList10);
        assertEquals(paperPresentedList9, paperPresentedList10);
        assertEquals(teacherAppointmentList9, paperPresentedList10);
        assertEquals(facultySeminarList3, paperPresentedList10);
        assertSame(pgQualification1, actualHod.getPgQualification());
        assertSame(researchPublicationList1, researchPublications);
        assertEquals(teacherAppointmentList, researchPublications);
        assertEquals(teacherApprovalList, researchPublications);
        assertEquals(teacherTransferList, researchPublications);
        assertEquals(paperPresentedList, researchPublications);
        assertEquals(researchPublicationList, researchPublications);
        assertEquals(bookPublicationList, researchPublications);
        assertEquals(bookPublicationList1, researchPublications);
        assertEquals(teacherAppointmentList1, researchPublications);
        assertEquals(teacherApprovalList1, researchPublications);
        assertEquals(teacherTransferList1, researchPublications);
        assertEquals(teacherApprovalList2, researchPublications);
        assertEquals(teacherTransferList2, researchPublications);
        assertEquals(bookPublicationList2, researchPublications);
        assertEquals(researchPublicationList2, researchPublications);
        assertEquals(paperPresentedList2, researchPublications);
        assertEquals(teacherAppointmentList2, researchPublications);
        assertEquals(facultyProgramList, researchPublications);
        assertEquals(teacherApprovalList3, researchPublications);
        assertEquals(teacherTransferList3, researchPublications);
        assertEquals(bookPublicationList3, researchPublications);
        assertEquals(researchPublicationList3, researchPublications);
        assertEquals(paperPresentedList3, researchPublications);
        assertEquals(teacherAppointmentList3, researchPublications);
        assertEquals(facultySeminarList, researchPublications);
        assertEquals(teacherApprovalList4, researchPublications);
        assertEquals(teacherTransferList4, researchPublications);
        assertEquals(bookPublicationList4, researchPublications);
        assertEquals(researchPublicationList4, researchPublications);
        assertEquals(paperPresentedList4, researchPublications);
        assertEquals(teacherAppointmentList4, researchPublications);
        assertEquals(facultyProgramList2, researchPublications);
        assertEquals(teacherApprovalList5, researchPublications);
        assertEquals(teacherTransferList5, researchPublications);
        assertEquals(bookPublicationList5, researchPublications);
        assertEquals(researchPublicationList5, researchPublications);
        assertEquals(paperPresentedList5, researchPublications);
        assertEquals(teacherAppointmentList5, researchPublications);
        assertEquals(facultyProgramList1, researchPublications);
        assertEquals(teacherApprovalList6, researchPublications);
        assertEquals(teacherTransferList6, researchPublications);
        assertEquals(bookPublicationList6, researchPublications);
        assertEquals(researchPublicationList6, researchPublications);
        assertEquals(paperPresentedList6, researchPublications);
        assertEquals(teacherAppointmentList6, researchPublications);
        assertEquals(facultySeminarList1, researchPublications);
        assertEquals(teacherApprovalList7, researchPublications);
        assertEquals(teacherTransferList7, researchPublications);
        assertEquals(bookPublicationList7, researchPublications);
        assertEquals(researchPublicationList7, researchPublications);
        assertEquals(paperPresentedList7, researchPublications);
        assertEquals(teacherAppointmentList7, researchPublications);
        assertEquals(facultySeminarList2, researchPublications);
        assertEquals(courseList, researchPublications);
        assertEquals(admittedStudentList, researchPublications);
        assertEquals(programList, researchPublications);
        assertEquals(teacherApprovalList8, researchPublications);
        assertEquals(teacherTransferList8, researchPublications);
        assertEquals(bookPublicationList8, researchPublications);
        assertEquals(researchPublicationList8, researchPublications);
        assertEquals(paperPresentedList8, researchPublications);
        assertEquals(teacherAppointmentList8, researchPublications);
        assertEquals(facultyProgramList3, researchPublications);
        assertEquals(teacherApprovalList9, researchPublications);
        assertEquals(teacherTransferList9, researchPublications);
        assertEquals(bookPublicationList9, researchPublications);
        assertEquals(researchPublicationList9, researchPublications);
        assertEquals(paperPresentedList9, researchPublications);
        assertEquals(teacherAppointmentList9, researchPublications);
        assertEquals(facultySeminarList3, researchPublications);
        assertEquals(paperPresentedList10, researchPublications);
        assertSame(researchQualification1, actualHod.getResearchQualification());
        List<TeacherAppointment> teacherAppointments = actualHod.getTeacherAppointments();
        assertSame(teacherAppointmentList1, teacherAppointments);
        assertEquals(teacherAppointmentList, teacherAppointments);
        assertEquals(teacherApprovalList, teacherAppointments);
        assertEquals(teacherTransferList, teacherAppointments);
        assertEquals(paperPresentedList, teacherAppointments);
        assertEquals(researchPublicationList, teacherAppointments);
        assertEquals(bookPublicationList, teacherAppointments);
        assertEquals(teacherApprovalList1, teacherAppointments);
        assertEquals(teacherTransferList1, teacherAppointments);
        assertEquals(teacherApprovalList2, teacherAppointments);
        assertEquals(teacherTransferList2, teacherAppointments);
        assertEquals(bookPublicationList2, teacherAppointments);
        assertEquals(researchPublicationList2, teacherAppointments);
        assertEquals(paperPresentedList2, teacherAppointments);
        assertEquals(teacherAppointmentList2, teacherAppointments);
        assertEquals(facultyProgramList, teacherAppointments);
        assertEquals(teacherApprovalList3, teacherAppointments);
        assertEquals(teacherTransferList3, teacherAppointments);
        assertEquals(bookPublicationList3, teacherAppointments);
        assertEquals(researchPublicationList3, teacherAppointments);
        assertEquals(paperPresentedList3, teacherAppointments);
        assertEquals(teacherAppointmentList3, teacherAppointments);
        assertEquals(facultySeminarList, teacherAppointments);
        assertEquals(teacherApprovalList4, teacherAppointments);
        assertEquals(teacherTransferList4, teacherAppointments);
        assertEquals(bookPublicationList4, teacherAppointments);
        assertEquals(researchPublicationList4, teacherAppointments);
        assertEquals(paperPresentedList4, teacherAppointments);
        assertEquals(teacherAppointmentList4, teacherAppointments);
        assertEquals(facultyProgramList2, teacherAppointments);
        assertEquals(teacherApprovalList5, teacherAppointments);
        assertEquals(teacherTransferList5, teacherAppointments);
        assertEquals(bookPublicationList5, teacherAppointments);
        assertEquals(researchPublicationList5, teacherAppointments);
        assertEquals(paperPresentedList5, teacherAppointments);
        assertEquals(teacherAppointmentList5, teacherAppointments);
        assertEquals(facultyProgramList1, teacherAppointments);
        assertEquals(teacherApprovalList6, teacherAppointments);
        assertEquals(teacherTransferList6, teacherAppointments);
        assertEquals(bookPublicationList6, teacherAppointments);
        assertEquals(researchPublicationList6, teacherAppointments);
        assertEquals(paperPresentedList6, teacherAppointments);
        assertEquals(teacherAppointmentList6, teacherAppointments);
        assertEquals(facultySeminarList1, teacherAppointments);
        assertEquals(teacherApprovalList7, teacherAppointments);
        assertEquals(teacherTransferList7, teacherAppointments);
        assertEquals(bookPublicationList7, teacherAppointments);
        assertEquals(researchPublicationList7, teacherAppointments);
        assertEquals(paperPresentedList7, teacherAppointments);
        assertEquals(teacherAppointmentList7, teacherAppointments);
        assertEquals(facultySeminarList2, teacherAppointments);
        assertEquals(courseList, teacherAppointments);
        assertEquals(admittedStudentList, teacherAppointments);
        assertEquals(programList, teacherAppointments);
        assertEquals(teacherApprovalList8, teacherAppointments);
        assertEquals(teacherTransferList8, teacherAppointments);
        assertEquals(bookPublicationList8, teacherAppointments);
        assertEquals(researchPublicationList8, teacherAppointments);
        assertEquals(paperPresentedList8, teacherAppointments);
        assertEquals(teacherAppointmentList8, teacherAppointments);
        assertEquals(facultyProgramList3, teacherAppointments);
        assertEquals(teacherApprovalList9, teacherAppointments);
        assertEquals(teacherTransferList9, teacherAppointments);
        assertEquals(bookPublicationList9, teacherAppointments);
        assertEquals(researchPublicationList9, teacherAppointments);
        assertEquals(paperPresentedList9, teacherAppointments);
        assertEquals(teacherAppointmentList9, teacherAppointments);
        assertEquals(facultySeminarList3, teacherAppointments);
        assertEquals(bookPublications, teacherAppointments);
        assertEquals(paperPresentedList10, teacherAppointments);
        assertEquals(researchPublications, teacherAppointments);
        List<TeacherApproval> teacherApprovals = actualHod.getTeacherApprovals();
        assertSame(teacherApprovalList1, teacherApprovals);
        assertEquals(teacherAppointmentList, teacherApprovals);
        assertEquals(teacherApprovalList, teacherApprovals);
        assertEquals(teacherTransferList, teacherApprovals);
        assertEquals(paperPresentedList, teacherApprovals);
        assertEquals(researchPublicationList, teacherApprovals);
        assertEquals(bookPublicationList, teacherApprovals);
        assertEquals(teacherTransferList1, teacherApprovals);
        assertEquals(teacherApprovalList2, teacherApprovals);
        assertEquals(teacherTransferList2, teacherApprovals);
        assertEquals(bookPublicationList2, teacherApprovals);
        assertEquals(researchPublicationList2, teacherApprovals);
        assertEquals(paperPresentedList2, teacherApprovals);
        assertEquals(teacherAppointmentList2, teacherApprovals);
        assertEquals(facultyProgramList, teacherApprovals);
        assertEquals(teacherApprovalList3, teacherApprovals);
        assertEquals(teacherTransferList3, teacherApprovals);
        assertEquals(bookPublicationList3, teacherApprovals);
        assertEquals(researchPublicationList3, teacherApprovals);
        assertEquals(paperPresentedList3, teacherApprovals);
        assertEquals(teacherAppointmentList3, teacherApprovals);
        assertEquals(facultySeminarList, teacherApprovals);
        assertEquals(teacherApprovalList4, teacherApprovals);
        assertEquals(teacherTransferList4, teacherApprovals);
        assertEquals(bookPublicationList4, teacherApprovals);
        assertEquals(researchPublicationList4, teacherApprovals);
        assertEquals(paperPresentedList4, teacherApprovals);
        assertEquals(teacherAppointmentList4, teacherApprovals);
        assertEquals(facultyProgramList2, teacherApprovals);
        assertEquals(teacherApprovalList5, teacherApprovals);
        assertEquals(teacherTransferList5, teacherApprovals);
        assertEquals(bookPublicationList5, teacherApprovals);
        assertEquals(researchPublicationList5, teacherApprovals);
        assertEquals(paperPresentedList5, teacherApprovals);
        assertEquals(teacherAppointmentList5, teacherApprovals);
        assertEquals(facultyProgramList1, teacherApprovals);
        assertEquals(teacherApprovalList6, teacherApprovals);
        assertEquals(teacherTransferList6, teacherApprovals);
        assertEquals(bookPublicationList6, teacherApprovals);
        assertEquals(researchPublicationList6, teacherApprovals);
        assertEquals(paperPresentedList6, teacherApprovals);
        assertEquals(teacherAppointmentList6, teacherApprovals);
        assertEquals(facultySeminarList1, teacherApprovals);
        assertEquals(teacherApprovalList7, teacherApprovals);
        assertEquals(teacherTransferList7, teacherApprovals);
        assertEquals(bookPublicationList7, teacherApprovals);
        assertEquals(researchPublicationList7, teacherApprovals);
        assertEquals(paperPresentedList7, teacherApprovals);
        assertEquals(teacherAppointmentList7, teacherApprovals);
        assertEquals(facultySeminarList2, teacherApprovals);
        assertEquals(courseList, teacherApprovals);
        assertEquals(admittedStudentList, teacherApprovals);
        assertEquals(programList, teacherApprovals);
        assertEquals(teacherApprovalList8, teacherApprovals);
        assertEquals(teacherTransferList8, teacherApprovals);
        assertEquals(bookPublicationList8, teacherApprovals);
        assertEquals(researchPublicationList8, teacherApprovals);
        assertEquals(paperPresentedList8, teacherApprovals);
        assertEquals(teacherAppointmentList8, teacherApprovals);
        assertEquals(facultyProgramList3, teacherApprovals);
        assertEquals(teacherApprovalList9, teacherApprovals);
        assertEquals(teacherTransferList9, teacherApprovals);
        assertEquals(bookPublicationList9, teacherApprovals);
        assertEquals(researchPublicationList9, teacherApprovals);
        assertEquals(paperPresentedList9, teacherApprovals);
        assertEquals(teacherAppointmentList9, teacherApprovals);
        assertEquals(facultySeminarList3, teacherApprovals);
        assertEquals(bookPublications, teacherApprovals);
        assertEquals(paperPresentedList10, teacherApprovals);
        assertEquals(researchPublications, teacherApprovals);
        assertEquals(teacherAppointments, teacherApprovals);
        List<TeacherTransfer> teacherTransfers = actualHod.getTeacherTransfers();
        assertSame(teacherTransferList1, teacherTransfers);
        assertEquals(teacherAppointmentList, teacherTransfers);
        assertEquals(teacherApprovalList, teacherTransfers);
        assertEquals(teacherTransferList, teacherTransfers);
        assertEquals(paperPresentedList, teacherTransfers);
        assertEquals(researchPublicationList, teacherTransfers);
        assertEquals(bookPublicationList, teacherTransfers);
        assertEquals(teacherApprovalList2, teacherTransfers);
        assertEquals(teacherTransferList2, teacherTransfers);
        assertEquals(bookPublicationList2, teacherTransfers);
        assertEquals(researchPublicationList2, teacherTransfers);
        assertEquals(paperPresentedList2, teacherTransfers);
        assertEquals(teacherAppointmentList2, teacherTransfers);
        assertEquals(facultyProgramList, teacherTransfers);
        assertEquals(teacherApprovalList3, teacherTransfers);
        assertEquals(teacherTransferList3, teacherTransfers);
        assertEquals(bookPublicationList3, teacherTransfers);
        assertEquals(researchPublicationList3, teacherTransfers);
        assertEquals(paperPresentedList3, teacherTransfers);
        assertEquals(teacherAppointmentList3, teacherTransfers);
        assertEquals(facultySeminarList, teacherTransfers);
        assertEquals(teacherApprovalList4, teacherTransfers);
        assertEquals(teacherTransferList4, teacherTransfers);
        assertEquals(bookPublicationList4, teacherTransfers);
        assertEquals(researchPublicationList4, teacherTransfers);
        assertEquals(paperPresentedList4, teacherTransfers);
        assertEquals(teacherAppointmentList4, teacherTransfers);
        assertEquals(facultyProgramList2, teacherTransfers);
        assertEquals(teacherApprovalList5, teacherTransfers);
        assertEquals(teacherTransferList5, teacherTransfers);
        assertEquals(bookPublicationList5, teacherTransfers);
        assertEquals(researchPublicationList5, teacherTransfers);
        assertEquals(paperPresentedList5, teacherTransfers);
        assertEquals(teacherAppointmentList5, teacherTransfers);
        assertEquals(facultyProgramList1, teacherTransfers);
        assertEquals(teacherApprovalList6, teacherTransfers);
        assertEquals(teacherTransferList6, teacherTransfers);
        assertEquals(bookPublicationList6, teacherTransfers);
        assertEquals(researchPublicationList6, teacherTransfers);
        assertEquals(paperPresentedList6, teacherTransfers);
        assertEquals(teacherAppointmentList6, teacherTransfers);
        assertEquals(facultySeminarList1, teacherTransfers);
        assertEquals(teacherApprovalList7, teacherTransfers);
        assertEquals(teacherTransferList7, teacherTransfers);
        assertEquals(bookPublicationList7, teacherTransfers);
        assertEquals(researchPublicationList7, teacherTransfers);
        assertEquals(paperPresentedList7, teacherTransfers);
        assertEquals(teacherAppointmentList7, teacherTransfers);
        assertEquals(facultySeminarList2, teacherTransfers);
        assertEquals(courseList, teacherTransfers);
        assertEquals(admittedStudentList, teacherTransfers);
        assertEquals(programList, teacherTransfers);
        assertEquals(teacherApprovalList8, teacherTransfers);
        assertEquals(teacherTransferList8, teacherTransfers);
        assertEquals(bookPublicationList8, teacherTransfers);
        assertEquals(researchPublicationList8, teacherTransfers);
        assertEquals(paperPresentedList8, teacherTransfers);
        assertEquals(teacherAppointmentList8, teacherTransfers);
        assertEquals(facultyProgramList3, teacherTransfers);
        assertEquals(teacherApprovalList9, teacherTransfers);
        assertEquals(teacherTransferList9, teacherTransfers);
        assertEquals(bookPublicationList9, teacherTransfers);
        assertEquals(researchPublicationList9, teacherTransfers);
        assertEquals(paperPresentedList9, teacherTransfers);
        assertEquals(teacherAppointmentList9, teacherTransfers);
        assertEquals(facultySeminarList3, teacherTransfers);
        assertEquals(bookPublications, teacherTransfers);
        assertEquals(paperPresentedList10, teacherTransfers);
        assertEquals(researchPublications, teacherTransfers);
        assertEquals(teacherAppointments, teacherTransfers);
        assertEquals(teacherApprovals, teacherTransfers);
        assertSame(ugQualification1, actualHod.getUgQualification());
        assertSame(user4, actualHod.getUser());
    }
}

