package one.transfinite.naac.report;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import one.transfinite.naac.commitee.AcademicCalender;
import one.transfinite.naac.commitee.Achievement;
import one.transfinite.naac.commitee.Committee;
import one.transfinite.naac.commitee.CommitteeMember;
import one.transfinite.naac.commitee.MeetingRecord;
import one.transfinite.naac.commitee.StudentAchievement;
import one.transfinite.naac.commitee.YearDetail;
import one.transfinite.naac.document.NewsReport;
import one.transfinite.naac.document.Participants;
import one.transfinite.naac.document.Photograph;
import org.junit.jupiter.api.Test;

class ReportOfActivitiesTest {
    @Test
    void testConstructor() {
        ReportOfActivities actualReportOfActivities = new ReportOfActivities();
        LocalDateTime atStartOfDayResult = LocalDate.of(1970, 1, 1).atStartOfDay();
        Date fromResult = Date.from(atStartOfDayResult.atZone(ZoneId.of("UTC")).toInstant());
        actualReportOfActivities.setFromDate(fromResult);
        actualReportOfActivities.setId(123L);
        ArrayList<Participants> participantsList = new ArrayList<Participants>();
        actualReportOfActivities.setListOfParticipants(participantsList);
        ArrayList<NewsReport> newsReportList = new ArrayList<NewsReport>();
        actualReportOfActivities.setNewsReports(newsReportList);
        actualReportOfActivities.setNoOfStudent(1L);
        actualReportOfActivities.setNoOfTeachers(1L);
        ArrayList<Photograph> photographList = new ArrayList<Photograph>();
        actualReportOfActivities.setPhotographs(photographList);
        actualReportOfActivities.setReportBrief("Report Brief");
        actualReportOfActivities.setSupportingAgency("Supporting Agency");
        actualReportOfActivities.setTitleOfActivity("Dr");
        LocalDateTime atStartOfDayResult1 = LocalDate.of(1970, 1, 1).atStartOfDay();
        Date fromResult1 = Date.from(atStartOfDayResult1.atZone(ZoneId.of("UTC")).toInstant());
        actualReportOfActivities.setToDate(fromResult1);
        Committee committee = new Committee();
        ArrayList<YearDetail> yearDetailList = new ArrayList<YearDetail>();
        committee.setYearDetails(yearDetailList);
        ArrayList<Achievement> achievementList = new ArrayList<Achievement>();
        committee.setAchievements(achievementList);
        committee.setId(123L);
        committee.setName("Name");
        LocalDateTime atStartOfDayResult2 = LocalDate.of(1970, 1, 1).atStartOfDay();
        committee.setCreatedAt(Date.from(atStartOfDayResult2.atZone(ZoneId.of("UTC")).toInstant()));
        YearDetail yearDetail = new YearDetail();
        ArrayList<StudentAchievement> studentAchievementList = new ArrayList<StudentAchievement>();
        yearDetail.setStudentAchievement(studentAchievementList);
        ArrayList<ReportOfActivities> reportOfActivitiesList = new ArrayList<ReportOfActivities>();
        yearDetail.setReportOfActivities(reportOfActivitiesList);
        ArrayList<MeetingRecord> meetingRecordList = new ArrayList<MeetingRecord>();
        yearDetail.setMeetingRecords(meetingRecordList);
        yearDetail.setCommittee(committee);
        ArrayList<CommitteeMember> committeeMemberList = new ArrayList<CommitteeMember>();
        yearDetail.setCommitteeMembers(committeeMemberList);
        yearDetail.setId(123L);
        yearDetail.setAcademicYear("Academic Year");
        ArrayList<AcademicCalender> academicCalenderList = new ArrayList<AcademicCalender>();
        yearDetail.setAcademicCalenders(academicCalenderList);
        actualReportOfActivities.setYearDetail(yearDetail);
        assertSame(fromResult, actualReportOfActivities.getFromDate());
        assertEquals(123L, actualReportOfActivities.getId().longValue());
        List<Participants> listOfParticipants = actualReportOfActivities.getListOfParticipants();
        assertSame(participantsList, listOfParticipants);
        assertEquals(photographList, listOfParticipants);
        assertEquals(studentAchievementList, listOfParticipants);
        assertEquals(reportOfActivitiesList, listOfParticipants);
        assertEquals(meetingRecordList, listOfParticipants);
        assertEquals(yearDetailList, listOfParticipants);
        assertEquals(achievementList, listOfParticipants);
        assertEquals(committeeMemberList, listOfParticipants);
        assertEquals(academicCalenderList, listOfParticipants);
        List<NewsReport> newsReports = actualReportOfActivities.getNewsReports();
        assertEquals(newsReports, listOfParticipants);
        assertSame(newsReportList, newsReports);
        assertEquals(participantsList, newsReports);
        assertEquals(photographList, newsReports);
        assertEquals(studentAchievementList, newsReports);
        assertEquals(reportOfActivitiesList, newsReports);
        assertEquals(meetingRecordList, newsReports);
        assertEquals(yearDetailList, newsReports);
        assertEquals(achievementList, newsReports);
        assertEquals(committeeMemberList, newsReports);
        assertEquals(academicCalenderList, newsReports);
        assertEquals(1L, actualReportOfActivities.getNoOfStudent().longValue());
        assertEquals(1L, actualReportOfActivities.getNoOfTeachers().longValue());
        List<Photograph> photographs = actualReportOfActivities.getPhotographs();
        assertSame(photographList, photographs);
        assertEquals(studentAchievementList, photographs);
        assertEquals(reportOfActivitiesList, photographs);
        assertEquals(meetingRecordList, photographs);
        assertEquals(yearDetailList, photographs);
        assertEquals(achievementList, photographs);
        assertEquals(committeeMemberList, photographs);
        assertEquals(academicCalenderList, photographs);
        assertEquals(listOfParticipants, photographs);
        assertEquals(newsReports, photographs);
        assertEquals("Report Brief", actualReportOfActivities.getReportBrief());
        assertEquals("Supporting Agency", actualReportOfActivities.getSupportingAgency());
        assertEquals("Dr", actualReportOfActivities.getTitleOfActivity());
        assertSame(fromResult1, actualReportOfActivities.getToDate());
        assertSame(yearDetail, actualReportOfActivities.getYearDetail());
    }

    @Test
    void testConstructor2() {
        YearDetail yearDetail = new YearDetail();
        Date fromDate = new Date(1L);
        Date toDate = new Date(1L);
        ArrayList<Photograph> photographList = new ArrayList<Photograph>();
        ArrayList<NewsReport> newsReportList = new ArrayList<NewsReport>();
        ArrayList<Participants> participantsList = new ArrayList<Participants>();
        ReportOfActivities actualReportOfActivities = new ReportOfActivities(123L, yearDetail, "Dr", fromDate, toDate, 1L,
                1L, "Report Brief", "Supporting Agency", photographList, newsReportList, participantsList);
        LocalDateTime atStartOfDayResult = LocalDate.of(1970, 1, 1).atStartOfDay();
        Date fromResult = Date.from(atStartOfDayResult.atZone(ZoneId.of("UTC")).toInstant());
        actualReportOfActivities.setFromDate(fromResult);
        actualReportOfActivities.setId(123L);
        ArrayList<Participants> participantsList1 = new ArrayList<Participants>();
        actualReportOfActivities.setListOfParticipants(participantsList1);
        ArrayList<NewsReport> newsReportList1 = new ArrayList<NewsReport>();
        actualReportOfActivities.setNewsReports(newsReportList1);
        actualReportOfActivities.setNoOfStudent(1L);
        actualReportOfActivities.setNoOfTeachers(1L);
        ArrayList<Photograph> photographList1 = new ArrayList<Photograph>();
        actualReportOfActivities.setPhotographs(photographList1);
        actualReportOfActivities.setReportBrief("Report Brief");
        actualReportOfActivities.setSupportingAgency("Supporting Agency");
        actualReportOfActivities.setTitleOfActivity("Dr");
        LocalDateTime atStartOfDayResult1 = LocalDate.of(1970, 1, 1).atStartOfDay();
        Date fromResult1 = Date.from(atStartOfDayResult1.atZone(ZoneId.of("UTC")).toInstant());
        actualReportOfActivities.setToDate(fromResult1);
        Committee committee = new Committee();
        ArrayList<YearDetail> yearDetailList = new ArrayList<YearDetail>();
        committee.setYearDetails(yearDetailList);
        ArrayList<Achievement> achievementList = new ArrayList<Achievement>();
        committee.setAchievements(achievementList);
        committee.setId(123L);
        committee.setName("Name");
        LocalDateTime atStartOfDayResult2 = LocalDate.of(1970, 1, 1).atStartOfDay();
        committee.setCreatedAt(Date.from(atStartOfDayResult2.atZone(ZoneId.of("UTC")).toInstant()));
        YearDetail yearDetail1 = new YearDetail();
        ArrayList<StudentAchievement> studentAchievementList = new ArrayList<StudentAchievement>();
        yearDetail1.setStudentAchievement(studentAchievementList);
        ArrayList<ReportOfActivities> reportOfActivitiesList = new ArrayList<ReportOfActivities>();
        yearDetail1.setReportOfActivities(reportOfActivitiesList);
        ArrayList<MeetingRecord> meetingRecordList = new ArrayList<MeetingRecord>();
        yearDetail1.setMeetingRecords(meetingRecordList);
        yearDetail1.setCommittee(committee);
        ArrayList<CommitteeMember> committeeMemberList = new ArrayList<CommitteeMember>();
        yearDetail1.setCommitteeMembers(committeeMemberList);
        yearDetail1.setId(123L);
        yearDetail1.setAcademicYear("Academic Year");
        ArrayList<AcademicCalender> academicCalenderList = new ArrayList<AcademicCalender>();
        yearDetail1.setAcademicCalenders(academicCalenderList);
        actualReportOfActivities.setYearDetail(yearDetail1);
        assertSame(fromResult, actualReportOfActivities.getFromDate());
        assertEquals(123L, actualReportOfActivities.getId().longValue());
        List<Participants> listOfParticipants = actualReportOfActivities.getListOfParticipants();
        assertSame(participantsList1, listOfParticipants);
        assertEquals(photographList, listOfParticipants);
        assertEquals(newsReportList, listOfParticipants);
        assertEquals(participantsList, listOfParticipants);
        assertEquals(photographList1, listOfParticipants);
        assertEquals(studentAchievementList, listOfParticipants);
        assertEquals(reportOfActivitiesList, listOfParticipants);
        assertEquals(meetingRecordList, listOfParticipants);
        assertEquals(yearDetailList, listOfParticipants);
        assertEquals(achievementList, listOfParticipants);
        assertEquals(committeeMemberList, listOfParticipants);
        assertEquals(academicCalenderList, listOfParticipants);
        List<NewsReport> newsReports = actualReportOfActivities.getNewsReports();
        assertEquals(newsReports, listOfParticipants);
        assertSame(newsReportList1, newsReports);
        assertEquals(photographList, newsReports);
        assertEquals(newsReportList, newsReports);
        assertEquals(participantsList, newsReports);
        assertEquals(participantsList1, newsReports);
        assertEquals(photographList1, newsReports);
        assertEquals(studentAchievementList, newsReports);
        assertEquals(reportOfActivitiesList, newsReports);
        assertEquals(meetingRecordList, newsReports);
        assertEquals(yearDetailList, newsReports);
        assertEquals(achievementList, newsReports);
        assertEquals(committeeMemberList, newsReports);
        assertEquals(academicCalenderList, newsReports);
        assertEquals(1L, actualReportOfActivities.getNoOfStudent().longValue());
        assertEquals(1L, actualReportOfActivities.getNoOfTeachers().longValue());
        List<Photograph> photographs = actualReportOfActivities.getPhotographs();
        assertSame(photographList1, photographs);
        assertEquals(photographList, photographs);
        assertEquals(newsReportList, photographs);
        assertEquals(participantsList, photographs);
        assertEquals(studentAchievementList, photographs);
        assertEquals(reportOfActivitiesList, photographs);
        assertEquals(meetingRecordList, photographs);
        assertEquals(yearDetailList, photographs);
        assertEquals(achievementList, photographs);
        assertEquals(committeeMemberList, photographs);
        assertEquals(academicCalenderList, photographs);
        assertEquals(listOfParticipants, photographs);
        assertEquals(newsReports, photographs);
        assertEquals("Report Brief", actualReportOfActivities.getReportBrief());
        assertEquals("Supporting Agency", actualReportOfActivities.getSupportingAgency());
        assertEquals("Dr", actualReportOfActivities.getTitleOfActivity());
        assertSame(fromResult1, actualReportOfActivities.getToDate());
        assertSame(yearDetail1, actualReportOfActivities.getYearDetail());
    }
}

