package one.transfinite.naac.department;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import one.transfinite.naac.course.Course;
import one.transfinite.naac.course.CourseType;
import one.transfinite.naac.hod.Hod;
import one.transfinite.naac.program.FacultyProgram;
import one.transfinite.naac.program.FacultySeminar;
import one.transfinite.naac.program.Program;
import one.transfinite.naac.publication.BookPublication;
import one.transfinite.naac.publication.PaperPresented;
import one.transfinite.naac.publication.ResearchPublication;
import one.transfinite.naac.qualification.EntranceQualification;
import one.transfinite.naac.qualification.PGQualification;
import one.transfinite.naac.qualification.ResearchQualification;
import one.transfinite.naac.qualification.UGQualification;
import one.transfinite.naac.role.Role;
import one.transfinite.naac.role.RoleName;
import one.transfinite.naac.student.AdmittedStudent;
import one.transfinite.naac.student.Student;
import one.transfinite.naac.teacher.Teacher;
import one.transfinite.naac.teacher.TeacherAppointment;
import one.transfinite.naac.teacher.TeacherApproval;
import one.transfinite.naac.teacher.TeacherTransfer;
import one.transfinite.naac.user.User;
import org.junit.jupiter.api.Test;

class TeachingDetailTest {
    @Test
    void testConstructor() {
        TeachingDetail actualTeachingDetail = new TeachingDetail();
        actualTeachingDetail.setAcademicYear("Academic Year");
        actualTeachingDetail.setCourseType(CourseType.Theory);
        ArrayList<Course> courseList = new ArrayList<Course>();
        actualTeachingDetail.setCourses(courseList);
        actualTeachingDetail.setId(123L);
        ResearchQualification researchQualification = new ResearchQualification();
        researchQualification.setSubject("Hello from the Dreaming Spires");
        researchQualification.setUniversity("University");
        researchQualification.setId(123L);
        researchQualification.setDegree("Degree");
        LocalDateTime atStartOfDayResult = LocalDate.of(1970, 1, 1).atStartOfDay();
        researchQualification.setDateOfDeclaration(Date.from(atStartOfDayResult.atZone(ZoneId.of("UTC")).toInstant()));
        ResearchQualification researchQualification1 = new ResearchQualification();
        researchQualification1.setSubject("Hello from the Dreaming Spires");
        researchQualification1.setUniversity("University");
        researchQualification1.setId(123L);
        researchQualification1.setDegree("Degree");
        LocalDateTime atStartOfDayResult1 = LocalDate.of(1970, 1, 1).atStartOfDay();
        researchQualification1.setDateOfDeclaration(Date.from(atStartOfDayResult1.atZone(ZoneId.of("UTC")).toInstant()));
        User user = new User();
        user.setLastName("Doe");
        user.setEmail("jane.doe@example.org");
        user.setPassword("iloveyou");
        user.setHod(new Hod());
        user.setRole(new Role());
        user.setUserId(123L);
        LocalDateTime atStartOfDayResult2 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user.setCreatedAt(Date.from(atStartOfDayResult2.atZone(ZoneId.of("UTC")).toInstant()));
        user.setMiddleName("Middle Name");
        user.setFirstName("Jane");
        LocalDateTime atStartOfDayResult3 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user.setDob(Date.from(atStartOfDayResult3.atZone(ZoneId.of("UTC")).toInstant()));
        user.setTeacher(new Teacher());
        user.setGender("Gender");
        user.setStudent(new Student());
        user.setPhone("4105551212");
        EntranceQualification entranceQualification = new EntranceQualification();
        entranceQualification.setSubject("Hello from the Dreaming Spires");
        entranceQualification.setUniversity("University");
        entranceQualification.setId(123L);
        entranceQualification.setName("Name");
        LocalDateTime atStartOfDayResult4 = LocalDate.of(1970, 1, 1).atStartOfDay();
        entranceQualification.setYearOfPassing(Date.from(atStartOfDayResult4.atZone(ZoneId.of("UTC")).toInstant()));
        UGQualification ugQualification = new UGQualification();
        ugQualification.setDocument("Document");
        ugQualification.setUniversity("University");
        ugQualification.setSpecialization("Specialization");
        ugQualification.setId(123L);
        ugQualification.setDegree("Degree");
        ugQualification.setGrade("Grade");
        LocalDateTime atStartOfDayResult5 = LocalDate.of(1970, 1, 1).atStartOfDay();
        ugQualification.setYearOfPassing(Date.from(atStartOfDayResult5.atZone(ZoneId.of("UTC")).toInstant()));
        PGQualification pgQualification = new PGQualification();
        pgQualification.setDocument("Document");
        pgQualification.setUniversity("University");
        pgQualification.setSpecialization("Specialization");
        pgQualification.setId(123L);
        pgQualification.setDegree("Degree");
        pgQualification.setGrade("Grade");
        LocalDateTime atStartOfDayResult6 = LocalDate.of(1970, 1, 1).atStartOfDay();
        pgQualification.setYearOfPassing(Date.from(atStartOfDayResult6.atZone(ZoneId.of("UTC")).toInstant()));
        Hod hod = new Hod();
        hod.setResearchQualification(researchQualification1);
        hod.setUser(user);
        ArrayList<TeacherApproval> teacherApprovalList = new ArrayList<TeacherApproval>();
        hod.setTeacherApprovals(teacherApprovalList);
        hod.setEntranceQualification(entranceQualification);
        hod.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList = new ArrayList<TeacherTransfer>();
        hod.setTeacherTransfers(teacherTransferList);
        ArrayList<BookPublication> bookPublicationList = new ArrayList<BookPublication>();
        hod.setBookPublications(bookPublicationList);
        ArrayList<ResearchPublication> researchPublicationList = new ArrayList<ResearchPublication>();
        hod.setResearchPublications(researchPublicationList);
        ArrayList<PaperPresented> paperPresentedList = new ArrayList<PaperPresented>();
        hod.setPaperPresentedList(paperPresentedList);
        hod.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList = new ArrayList<TeacherAppointment>();
        hod.setTeacherAppointments(teacherAppointmentList);
        hod.setId(123L);
        hod.setUgQualification(ugQualification);
        hod.setPanNumber("42");
        hod.setAadharNumber("42");
        hod.setPgQualification(pgQualification);
        Role role = new Role();
        role.setRoleName(RoleName.Admin);
        role.setId(123L);
        ResearchQualification researchQualification2 = new ResearchQualification();
        researchQualification2.setSubject("Hello from the Dreaming Spires");
        researchQualification2.setUniversity("University");
        researchQualification2.setId(123L);
        researchQualification2.setDegree("Degree");
        LocalDateTime atStartOfDayResult7 = LocalDate.of(1970, 1, 1).atStartOfDay();
        researchQualification2.setDateOfDeclaration(Date.from(atStartOfDayResult7.atZone(ZoneId.of("UTC")).toInstant()));
        User user1 = new User();
        user1.setLastName("Doe");
        user1.setEmail("jane.doe@example.org");
        user1.setPassword("iloveyou");
        user1.setHod(new Hod());
        user1.setRole(new Role());
        user1.setUserId(123L);
        LocalDateTime atStartOfDayResult8 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user1.setCreatedAt(Date.from(atStartOfDayResult8.atZone(ZoneId.of("UTC")).toInstant()));
        user1.setMiddleName("Middle Name");
        user1.setFirstName("Jane");
        LocalDateTime atStartOfDayResult9 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user1.setDob(Date.from(atStartOfDayResult9.atZone(ZoneId.of("UTC")).toInstant()));
        user1.setTeacher(new Teacher());
        user1.setGender("Gender");
        user1.setStudent(new Student());
        user1.setPhone("4105551212");
        EntranceQualification entranceQualification1 = new EntranceQualification();
        entranceQualification1.setSubject("Hello from the Dreaming Spires");
        entranceQualification1.setUniversity("University");
        entranceQualification1.setId(123L);
        entranceQualification1.setName("Name");
        LocalDateTime atStartOfDayResult10 = LocalDate.of(1970, 1, 1).atStartOfDay();
        entranceQualification1.setYearOfPassing(Date.from(atStartOfDayResult10.atZone(ZoneId.of("UTC")).toInstant()));
        UGQualification ugQualification1 = new UGQualification();
        ugQualification1.setDocument("Document");
        ugQualification1.setUniversity("University");
        ugQualification1.setSpecialization("Specialization");
        ugQualification1.setId(123L);
        ugQualification1.setDegree("Degree");
        ugQualification1.setGrade("Grade");
        LocalDateTime atStartOfDayResult11 = LocalDate.of(1970, 1, 1).atStartOfDay();
        ugQualification1.setYearOfPassing(Date.from(atStartOfDayResult11.atZone(ZoneId.of("UTC")).toInstant()));
        PGQualification pgQualification1 = new PGQualification();
        pgQualification1.setDocument("Document");
        pgQualification1.setUniversity("University");
        pgQualification1.setSpecialization("Specialization");
        pgQualification1.setId(123L);
        pgQualification1.setDegree("Degree");
        pgQualification1.setGrade("Grade");
        LocalDateTime atStartOfDayResult12 = LocalDate.of(1970, 1, 1).atStartOfDay();
        pgQualification1.setYearOfPassing(Date.from(atStartOfDayResult12.atZone(ZoneId.of("UTC")).toInstant()));
        Teacher teacher = new Teacher();
        teacher.setResearchQualification(researchQualification2);
        ArrayList<FacultyProgram> facultyProgramList = new ArrayList<FacultyProgram>();
        teacher.setFacultyPrograms(facultyProgramList);
        teacher.setUser(user1);
        ArrayList<TeacherApproval> teacherApprovalList1 = new ArrayList<TeacherApproval>();
        teacher.setTeacherApprovals(teacherApprovalList1);
        teacher.setEntranceQualification(entranceQualification1);
        teacher.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList1 = new ArrayList<TeacherTransfer>();
        teacher.setTeacherTransfers(teacherTransferList1);
        ArrayList<BookPublication> bookPublicationList1 = new ArrayList<BookPublication>();
        teacher.setBookPublications(bookPublicationList1);
        ArrayList<ResearchPublication> researchPublicationList1 = new ArrayList<ResearchPublication>();
        teacher.setResearchPublications(researchPublicationList1);
        teacher.setTeacherId(123L);
        ArrayList<PaperPresented> paperPresentedList1 = new ArrayList<PaperPresented>();
        teacher.setPaperPresentedList(paperPresentedList1);
        teacher.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList1 = new ArrayList<TeacherAppointment>();
        teacher.setTeacherAppointments(teacherAppointmentList1);
        teacher.setUgQualification(ugQualification1);
        teacher.setPanNumber("42");
        teacher.setAadharNumber("42");
        ArrayList<FacultySeminar> facultySeminarList = new ArrayList<FacultySeminar>();
        teacher.setFacultySeminars(facultySeminarList);
        teacher.setPgQualification(pgQualification1);
        Program program = new Program();
        program.setProgramCode("Program Code");
        program.setProgramName("Program Name");
        ArrayList<Course> courseList1 = new ArrayList<Course>();
        program.setCourses(courseList1);
        program.setProgramId(123L);
        program.setStartYear("Start Year");
        ArrayList<AdmittedStudent> admittedStudentList = new ArrayList<AdmittedStudent>();
        program.setAdmittedStudents(admittedStudentList);
        program.setDepartment(new Department());
        program.setProgramType("Program Type");
        User user2 = new User();
        user2.setLastName("Doe");
        user2.setEmail("jane.doe@example.org");
        user2.setPassword("iloveyou");
        user2.setHod(new Hod());
        user2.setRole(new Role());
        user2.setUserId(123L);
        LocalDateTime atStartOfDayResult13 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user2.setCreatedAt(Date.from(atStartOfDayResult13.atZone(ZoneId.of("UTC")).toInstant()));
        user2.setMiddleName("Middle Name");
        user2.setFirstName("Jane");
        LocalDateTime atStartOfDayResult14 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user2.setDob(Date.from(atStartOfDayResult14.atZone(ZoneId.of("UTC")).toInstant()));
        user2.setTeacher(new Teacher());
        user2.setGender("Gender");
        user2.setStudent(new Student());
        user2.setPhone("4105551212");
        Student student = new Student();
        student.setProgram(program);
        student.setFatherName("Father Name");
        student.setReligion("Religion");
        student.setUser(user2);
        student.setPanDocument("Pan Document");
        student.setTenthMarks(10.0);
        student.setTwelthMarks(10.0);
        student.setStudentId(123L);
        student.setMotherName("Mother Name");
        student.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult15 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student.setStartDate(Date.from(atStartOfDayResult15.atZone(ZoneId.of("UTC")).toInstant()));
        student.setAadharDocument("Aadhar Document");
        student.setPanNumber("42");
        student.setAadharNumber("42");
        LocalDateTime atStartOfDayResult16 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student.setCompletionDate(Date.from(atStartOfDayResult16.atZone(ZoneId.of("UTC")).toInstant()));
        student.setMotherPhoneNumber("4105551212");
        student.setCast("Cast");
        User user3 = new User();
        user3.setLastName("Doe");
        user3.setEmail("jane.doe@example.org");
        user3.setPassword("iloveyou");
        user3.setHod(hod);
        user3.setRole(role);
        user3.setUserId(123L);
        LocalDateTime atStartOfDayResult17 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user3.setCreatedAt(Date.from(atStartOfDayResult17.atZone(ZoneId.of("UTC")).toInstant()));
        user3.setMiddleName("Middle Name");
        user3.setFirstName("Jane");
        LocalDateTime atStartOfDayResult18 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user3.setDob(Date.from(atStartOfDayResult18.atZone(ZoneId.of("UTC")).toInstant()));
        user3.setTeacher(teacher);
        user3.setGender("Gender");
        user3.setStudent(student);
        user3.setPhone("4105551212");
        EntranceQualification entranceQualification2 = new EntranceQualification();
        entranceQualification2.setSubject("Hello from the Dreaming Spires");
        entranceQualification2.setUniversity("University");
        entranceQualification2.setId(123L);
        entranceQualification2.setName("Name");
        LocalDateTime atStartOfDayResult19 = LocalDate.of(1970, 1, 1).atStartOfDay();
        entranceQualification2.setYearOfPassing(Date.from(atStartOfDayResult19.atZone(ZoneId.of("UTC")).toInstant()));
        UGQualification ugQualification2 = new UGQualification();
        ugQualification2.setDocument("Document");
        ugQualification2.setUniversity("University");
        ugQualification2.setSpecialization("Specialization");
        ugQualification2.setId(123L);
        ugQualification2.setDegree("Degree");
        ugQualification2.setGrade("Grade");
        LocalDateTime atStartOfDayResult20 = LocalDate.of(1970, 1, 1).atStartOfDay();
        ugQualification2.setYearOfPassing(Date.from(atStartOfDayResult20.atZone(ZoneId.of("UTC")).toInstant()));
        PGQualification pgQualification2 = new PGQualification();
        pgQualification2.setDocument("Document");
        pgQualification2.setUniversity("University");
        pgQualification2.setSpecialization("Specialization");
        pgQualification2.setId(123L);
        pgQualification2.setDegree("Degree");
        pgQualification2.setGrade("Grade");
        LocalDateTime atStartOfDayResult21 = LocalDate.of(1970, 1, 1).atStartOfDay();
        pgQualification2.setYearOfPassing(Date.from(atStartOfDayResult21.atZone(ZoneId.of("UTC")).toInstant()));
        Teacher teacher1 = new Teacher();
        teacher1.setResearchQualification(researchQualification);
        ArrayList<FacultyProgram> facultyProgramList1 = new ArrayList<FacultyProgram>();
        teacher1.setFacultyPrograms(facultyProgramList1);
        teacher1.setUser(user3);
        ArrayList<TeacherApproval> teacherApprovalList2 = new ArrayList<TeacherApproval>();
        teacher1.setTeacherApprovals(teacherApprovalList2);
        teacher1.setEntranceQualification(entranceQualification2);
        teacher1.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList2 = new ArrayList<TeacherTransfer>();
        teacher1.setTeacherTransfers(teacherTransferList2);
        ArrayList<BookPublication> bookPublicationList2 = new ArrayList<BookPublication>();
        teacher1.setBookPublications(bookPublicationList2);
        ArrayList<ResearchPublication> researchPublicationList2 = new ArrayList<ResearchPublication>();
        teacher1.setResearchPublications(researchPublicationList2);
        teacher1.setTeacherId(123L);
        ArrayList<PaperPresented> paperPresentedList2 = new ArrayList<PaperPresented>();
        teacher1.setPaperPresentedList(paperPresentedList2);
        teacher1.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList2 = new ArrayList<TeacherAppointment>();
        teacher1.setTeacherAppointments(teacherAppointmentList2);
        teacher1.setUgQualification(ugQualification2);
        teacher1.setPanNumber("42");
        teacher1.setAadharNumber("42");
        ArrayList<FacultySeminar> facultySeminarList1 = new ArrayList<FacultySeminar>();
        teacher1.setFacultySeminars(facultySeminarList1);
        teacher1.setPgQualification(pgQualification2);
        actualTeachingDetail.setTeacher(teacher1);
        assertEquals("Academic Year", actualTeachingDetail.getAcademicYear());
        assertEquals(CourseType.Theory, actualTeachingDetail.getCourseType());
        List<Course> courses = actualTeachingDetail.getCourses();
        assertSame(courseList, courses);
        assertEquals(facultyProgramList1, courses);
        assertEquals(teacherApprovalList, courses);
        assertEquals(teacherTransferList, courses);
        assertEquals(bookPublicationList, courses);
        assertEquals(researchPublicationList, courses);
        assertEquals(paperPresentedList, courses);
        assertEquals(teacherAppointmentList, courses);
        assertEquals(facultyProgramList, courses);
        assertEquals(teacherApprovalList1, courses);
        assertEquals(teacherTransferList1, courses);
        assertEquals(bookPublicationList1, courses);
        assertEquals(researchPublicationList1, courses);
        assertEquals(paperPresentedList1, courses);
        assertEquals(teacherAppointmentList1, courses);
        assertEquals(facultySeminarList, courses);
        assertEquals(courseList1, courses);
        assertEquals(admittedStudentList, courses);
        assertEquals(teacherApprovalList2, courses);
        assertEquals(teacherTransferList2, courses);
        assertEquals(bookPublicationList2, courses);
        assertEquals(researchPublicationList2, courses);
        assertEquals(paperPresentedList2, courses);
        assertEquals(teacherAppointmentList2, courses);
        assertEquals(facultySeminarList1, courses);
        assertEquals(123L, actualTeachingDetail.getId().longValue());
        assertSame(teacher1, actualTeachingDetail.getTeacher());
    }

    @Test
    void testConstructor2() {
        Teacher teacher = new Teacher();
        ArrayList<Course> courseList = new ArrayList<Course>();
        TeachingDetail actualTeachingDetail = new TeachingDetail(123L, "Academic Year", teacher, courseList,
                CourseType.Theory);
        actualTeachingDetail.setAcademicYear("Academic Year");
        actualTeachingDetail.setCourseType(CourseType.Theory);
        ArrayList<Course> courseList1 = new ArrayList<Course>();
        actualTeachingDetail.setCourses(courseList1);
        actualTeachingDetail.setId(123L);
        ResearchQualification researchQualification = new ResearchQualification();
        researchQualification.setSubject("Hello from the Dreaming Spires");
        researchQualification.setUniversity("University");
        researchQualification.setId(123L);
        researchQualification.setDegree("Degree");
        LocalDateTime atStartOfDayResult = LocalDate.of(1970, 1, 1).atStartOfDay();
        researchQualification.setDateOfDeclaration(Date.from(atStartOfDayResult.atZone(ZoneId.of("UTC")).toInstant()));
        ResearchQualification researchQualification1 = new ResearchQualification();
        researchQualification1.setSubject("Hello from the Dreaming Spires");
        researchQualification1.setUniversity("University");
        researchQualification1.setId(123L);
        researchQualification1.setDegree("Degree");
        LocalDateTime atStartOfDayResult1 = LocalDate.of(1970, 1, 1).atStartOfDay();
        researchQualification1.setDateOfDeclaration(Date.from(atStartOfDayResult1.atZone(ZoneId.of("UTC")).toInstant()));
        User user = new User();
        user.setLastName("Doe");
        user.setEmail("jane.doe@example.org");
        user.setPassword("iloveyou");
        user.setHod(new Hod());
        user.setRole(new Role());
        user.setUserId(123L);
        LocalDateTime atStartOfDayResult2 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user.setCreatedAt(Date.from(atStartOfDayResult2.atZone(ZoneId.of("UTC")).toInstant()));
        user.setMiddleName("Middle Name");
        user.setFirstName("Jane");
        LocalDateTime atStartOfDayResult3 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user.setDob(Date.from(atStartOfDayResult3.atZone(ZoneId.of("UTC")).toInstant()));
        user.setTeacher(new Teacher());
        user.setGender("Gender");
        user.setStudent(new Student());
        user.setPhone("4105551212");
        EntranceQualification entranceQualification = new EntranceQualification();
        entranceQualification.setSubject("Hello from the Dreaming Spires");
        entranceQualification.setUniversity("University");
        entranceQualification.setId(123L);
        entranceQualification.setName("Name");
        LocalDateTime atStartOfDayResult4 = LocalDate.of(1970, 1, 1).atStartOfDay();
        entranceQualification.setYearOfPassing(Date.from(atStartOfDayResult4.atZone(ZoneId.of("UTC")).toInstant()));
        UGQualification ugQualification = new UGQualification();
        ugQualification.setDocument("Document");
        ugQualification.setUniversity("University");
        ugQualification.setSpecialization("Specialization");
        ugQualification.setId(123L);
        ugQualification.setDegree("Degree");
        ugQualification.setGrade("Grade");
        LocalDateTime atStartOfDayResult5 = LocalDate.of(1970, 1, 1).atStartOfDay();
        ugQualification.setYearOfPassing(Date.from(atStartOfDayResult5.atZone(ZoneId.of("UTC")).toInstant()));
        PGQualification pgQualification = new PGQualification();
        pgQualification.setDocument("Document");
        pgQualification.setUniversity("University");
        pgQualification.setSpecialization("Specialization");
        pgQualification.setId(123L);
        pgQualification.setDegree("Degree");
        pgQualification.setGrade("Grade");
        LocalDateTime atStartOfDayResult6 = LocalDate.of(1970, 1, 1).atStartOfDay();
        pgQualification.setYearOfPassing(Date.from(atStartOfDayResult6.atZone(ZoneId.of("UTC")).toInstant()));
        Hod hod = new Hod();
        hod.setResearchQualification(researchQualification1);
        hod.setUser(user);
        ArrayList<TeacherApproval> teacherApprovalList = new ArrayList<TeacherApproval>();
        hod.setTeacherApprovals(teacherApprovalList);
        hod.setEntranceQualification(entranceQualification);
        hod.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList = new ArrayList<TeacherTransfer>();
        hod.setTeacherTransfers(teacherTransferList);
        ArrayList<BookPublication> bookPublicationList = new ArrayList<BookPublication>();
        hod.setBookPublications(bookPublicationList);
        ArrayList<ResearchPublication> researchPublicationList = new ArrayList<ResearchPublication>();
        hod.setResearchPublications(researchPublicationList);
        ArrayList<PaperPresented> paperPresentedList = new ArrayList<PaperPresented>();
        hod.setPaperPresentedList(paperPresentedList);
        hod.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList = new ArrayList<TeacherAppointment>();
        hod.setTeacherAppointments(teacherAppointmentList);
        hod.setId(123L);
        hod.setUgQualification(ugQualification);
        hod.setPanNumber("42");
        hod.setAadharNumber("42");
        hod.setPgQualification(pgQualification);
        Role role = new Role();
        role.setRoleName(RoleName.Admin);
        role.setId(123L);
        ResearchQualification researchQualification2 = new ResearchQualification();
        researchQualification2.setSubject("Hello from the Dreaming Spires");
        researchQualification2.setUniversity("University");
        researchQualification2.setId(123L);
        researchQualification2.setDegree("Degree");
        LocalDateTime atStartOfDayResult7 = LocalDate.of(1970, 1, 1).atStartOfDay();
        researchQualification2.setDateOfDeclaration(Date.from(atStartOfDayResult7.atZone(ZoneId.of("UTC")).toInstant()));
        User user1 = new User();
        user1.setLastName("Doe");
        user1.setEmail("jane.doe@example.org");
        user1.setPassword("iloveyou");
        user1.setHod(new Hod());
        user1.setRole(new Role());
        user1.setUserId(123L);
        LocalDateTime atStartOfDayResult8 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user1.setCreatedAt(Date.from(atStartOfDayResult8.atZone(ZoneId.of("UTC")).toInstant()));
        user1.setMiddleName("Middle Name");
        user1.setFirstName("Jane");
        LocalDateTime atStartOfDayResult9 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user1.setDob(Date.from(atStartOfDayResult9.atZone(ZoneId.of("UTC")).toInstant()));
        user1.setTeacher(new Teacher());
        user1.setGender("Gender");
        user1.setStudent(new Student());
        user1.setPhone("4105551212");
        EntranceQualification entranceQualification1 = new EntranceQualification();
        entranceQualification1.setSubject("Hello from the Dreaming Spires");
        entranceQualification1.setUniversity("University");
        entranceQualification1.setId(123L);
        entranceQualification1.setName("Name");
        LocalDateTime atStartOfDayResult10 = LocalDate.of(1970, 1, 1).atStartOfDay();
        entranceQualification1.setYearOfPassing(Date.from(atStartOfDayResult10.atZone(ZoneId.of("UTC")).toInstant()));
        UGQualification ugQualification1 = new UGQualification();
        ugQualification1.setDocument("Document");
        ugQualification1.setUniversity("University");
        ugQualification1.setSpecialization("Specialization");
        ugQualification1.setId(123L);
        ugQualification1.setDegree("Degree");
        ugQualification1.setGrade("Grade");
        LocalDateTime atStartOfDayResult11 = LocalDate.of(1970, 1, 1).atStartOfDay();
        ugQualification1.setYearOfPassing(Date.from(atStartOfDayResult11.atZone(ZoneId.of("UTC")).toInstant()));
        PGQualification pgQualification1 = new PGQualification();
        pgQualification1.setDocument("Document");
        pgQualification1.setUniversity("University");
        pgQualification1.setSpecialization("Specialization");
        pgQualification1.setId(123L);
        pgQualification1.setDegree("Degree");
        pgQualification1.setGrade("Grade");
        LocalDateTime atStartOfDayResult12 = LocalDate.of(1970, 1, 1).atStartOfDay();
        pgQualification1.setYearOfPassing(Date.from(atStartOfDayResult12.atZone(ZoneId.of("UTC")).toInstant()));
        Teacher teacher1 = new Teacher();
        teacher1.setResearchQualification(researchQualification2);
        ArrayList<FacultyProgram> facultyProgramList = new ArrayList<FacultyProgram>();
        teacher1.setFacultyPrograms(facultyProgramList);
        teacher1.setUser(user1);
        ArrayList<TeacherApproval> teacherApprovalList1 = new ArrayList<TeacherApproval>();
        teacher1.setTeacherApprovals(teacherApprovalList1);
        teacher1.setEntranceQualification(entranceQualification1);
        teacher1.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList1 = new ArrayList<TeacherTransfer>();
        teacher1.setTeacherTransfers(teacherTransferList1);
        ArrayList<BookPublication> bookPublicationList1 = new ArrayList<BookPublication>();
        teacher1.setBookPublications(bookPublicationList1);
        ArrayList<ResearchPublication> researchPublicationList1 = new ArrayList<ResearchPublication>();
        teacher1.setResearchPublications(researchPublicationList1);
        teacher1.setTeacherId(123L);
        ArrayList<PaperPresented> paperPresentedList1 = new ArrayList<PaperPresented>();
        teacher1.setPaperPresentedList(paperPresentedList1);
        teacher1.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList1 = new ArrayList<TeacherAppointment>();
        teacher1.setTeacherAppointments(teacherAppointmentList1);
        teacher1.setUgQualification(ugQualification1);
        teacher1.setPanNumber("42");
        teacher1.setAadharNumber("42");
        ArrayList<FacultySeminar> facultySeminarList = new ArrayList<FacultySeminar>();
        teacher1.setFacultySeminars(facultySeminarList);
        teacher1.setPgQualification(pgQualification1);
        Program program = new Program();
        program.setProgramCode("Program Code");
        program.setProgramName("Program Name");
        ArrayList<Course> courseList2 = new ArrayList<Course>();
        program.setCourses(courseList2);
        program.setProgramId(123L);
        program.setStartYear("Start Year");
        ArrayList<AdmittedStudent> admittedStudentList = new ArrayList<AdmittedStudent>();
        program.setAdmittedStudents(admittedStudentList);
        program.setDepartment(new Department());
        program.setProgramType("Program Type");
        User user2 = new User();
        user2.setLastName("Doe");
        user2.setEmail("jane.doe@example.org");
        user2.setPassword("iloveyou");
        user2.setHod(new Hod());
        user2.setRole(new Role());
        user2.setUserId(123L);
        LocalDateTime atStartOfDayResult13 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user2.setCreatedAt(Date.from(atStartOfDayResult13.atZone(ZoneId.of("UTC")).toInstant()));
        user2.setMiddleName("Middle Name");
        user2.setFirstName("Jane");
        LocalDateTime atStartOfDayResult14 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user2.setDob(Date.from(atStartOfDayResult14.atZone(ZoneId.of("UTC")).toInstant()));
        user2.setTeacher(new Teacher());
        user2.setGender("Gender");
        user2.setStudent(new Student());
        user2.setPhone("4105551212");
        Student student = new Student();
        student.setProgram(program);
        student.setFatherName("Father Name");
        student.setReligion("Religion");
        student.setUser(user2);
        student.setPanDocument("Pan Document");
        student.setTenthMarks(10.0);
        student.setTwelthMarks(10.0);
        student.setStudentId(123L);
        student.setMotherName("Mother Name");
        student.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult15 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student.setStartDate(Date.from(atStartOfDayResult15.atZone(ZoneId.of("UTC")).toInstant()));
        student.setAadharDocument("Aadhar Document");
        student.setPanNumber("42");
        student.setAadharNumber("42");
        LocalDateTime atStartOfDayResult16 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student.setCompletionDate(Date.from(atStartOfDayResult16.atZone(ZoneId.of("UTC")).toInstant()));
        student.setMotherPhoneNumber("4105551212");
        student.setCast("Cast");
        User user3 = new User();
        user3.setLastName("Doe");
        user3.setEmail("jane.doe@example.org");
        user3.setPassword("iloveyou");
        user3.setHod(hod);
        user3.setRole(role);
        user3.setUserId(123L);
        LocalDateTime atStartOfDayResult17 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user3.setCreatedAt(Date.from(atStartOfDayResult17.atZone(ZoneId.of("UTC")).toInstant()));
        user3.setMiddleName("Middle Name");
        user3.setFirstName("Jane");
        LocalDateTime atStartOfDayResult18 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user3.setDob(Date.from(atStartOfDayResult18.atZone(ZoneId.of("UTC")).toInstant()));
        user3.setTeacher(teacher1);
        user3.setGender("Gender");
        user3.setStudent(student);
        user3.setPhone("4105551212");
        EntranceQualification entranceQualification2 = new EntranceQualification();
        entranceQualification2.setSubject("Hello from the Dreaming Spires");
        entranceQualification2.setUniversity("University");
        entranceQualification2.setId(123L);
        entranceQualification2.setName("Name");
        LocalDateTime atStartOfDayResult19 = LocalDate.of(1970, 1, 1).atStartOfDay();
        entranceQualification2.setYearOfPassing(Date.from(atStartOfDayResult19.atZone(ZoneId.of("UTC")).toInstant()));
        UGQualification ugQualification2 = new UGQualification();
        ugQualification2.setDocument("Document");
        ugQualification2.setUniversity("University");
        ugQualification2.setSpecialization("Specialization");
        ugQualification2.setId(123L);
        ugQualification2.setDegree("Degree");
        ugQualification2.setGrade("Grade");
        LocalDateTime atStartOfDayResult20 = LocalDate.of(1970, 1, 1).atStartOfDay();
        ugQualification2.setYearOfPassing(Date.from(atStartOfDayResult20.atZone(ZoneId.of("UTC")).toInstant()));
        PGQualification pgQualification2 = new PGQualification();
        pgQualification2.setDocument("Document");
        pgQualification2.setUniversity("University");
        pgQualification2.setSpecialization("Specialization");
        pgQualification2.setId(123L);
        pgQualification2.setDegree("Degree");
        pgQualification2.setGrade("Grade");
        LocalDateTime atStartOfDayResult21 = LocalDate.of(1970, 1, 1).atStartOfDay();
        pgQualification2.setYearOfPassing(Date.from(atStartOfDayResult21.atZone(ZoneId.of("UTC")).toInstant()));
        Teacher teacher2 = new Teacher();
        teacher2.setResearchQualification(researchQualification);
        ArrayList<FacultyProgram> facultyProgramList1 = new ArrayList<FacultyProgram>();
        teacher2.setFacultyPrograms(facultyProgramList1);
        teacher2.setUser(user3);
        ArrayList<TeacherApproval> teacherApprovalList2 = new ArrayList<TeacherApproval>();
        teacher2.setTeacherApprovals(teacherApprovalList2);
        teacher2.setEntranceQualification(entranceQualification2);
        teacher2.setPanDocument("Pan Document");
        ArrayList<TeacherTransfer> teacherTransferList2 = new ArrayList<TeacherTransfer>();
        teacher2.setTeacherTransfers(teacherTransferList2);
        ArrayList<BookPublication> bookPublicationList2 = new ArrayList<BookPublication>();
        teacher2.setBookPublications(bookPublicationList2);
        ArrayList<ResearchPublication> researchPublicationList2 = new ArrayList<ResearchPublication>();
        teacher2.setResearchPublications(researchPublicationList2);
        teacher2.setTeacherId(123L);
        ArrayList<PaperPresented> paperPresentedList2 = new ArrayList<PaperPresented>();
        teacher2.setPaperPresentedList(paperPresentedList2);
        teacher2.setAadharDocument("Aadhar Document");
        ArrayList<TeacherAppointment> teacherAppointmentList2 = new ArrayList<TeacherAppointment>();
        teacher2.setTeacherAppointments(teacherAppointmentList2);
        teacher2.setUgQualification(ugQualification2);
        teacher2.setPanNumber("42");
        teacher2.setAadharNumber("42");
        ArrayList<FacultySeminar> facultySeminarList1 = new ArrayList<FacultySeminar>();
        teacher2.setFacultySeminars(facultySeminarList1);
        teacher2.setPgQualification(pgQualification2);
        actualTeachingDetail.setTeacher(teacher2);
        assertEquals("Academic Year", actualTeachingDetail.getAcademicYear());
        assertEquals(CourseType.Theory, actualTeachingDetail.getCourseType());
        List<Course> courses = actualTeachingDetail.getCourses();
        assertSame(courseList1, courses);
        assertEquals(courseList, courses);
        assertEquals(facultyProgramList1, courses);
        assertEquals(teacherApprovalList, courses);
        assertEquals(teacherTransferList, courses);
        assertEquals(bookPublicationList, courses);
        assertEquals(researchPublicationList, courses);
        assertEquals(paperPresentedList, courses);
        assertEquals(teacherAppointmentList, courses);
        assertEquals(facultyProgramList, courses);
        assertEquals(teacherApprovalList1, courses);
        assertEquals(teacherTransferList1, courses);
        assertEquals(bookPublicationList1, courses);
        assertEquals(researchPublicationList1, courses);
        assertEquals(paperPresentedList1, courses);
        assertEquals(teacherAppointmentList1, courses);
        assertEquals(facultySeminarList, courses);
        assertEquals(courseList2, courses);
        assertEquals(admittedStudentList, courses);
        assertEquals(teacherApprovalList2, courses);
        assertEquals(teacherTransferList2, courses);
        assertEquals(bookPublicationList2, courses);
        assertEquals(researchPublicationList2, courses);
        assertEquals(paperPresentedList2, courses);
        assertEquals(teacherAppointmentList2, courses);
        assertEquals(facultySeminarList1, courses);
        assertEquals(123L, actualTeachingDetail.getId().longValue());
        assertSame(teacher2, actualTeachingDetail.getTeacher());
    }
}

