package one.transfinite.naac.teaching_plan;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;

import one.transfinite.naac.course.Course;
import one.transfinite.naac.department.Department;
import one.transfinite.naac.hod.Hod;
import one.transfinite.naac.program.FacultyProgram;
import one.transfinite.naac.program.FacultySeminar;
import one.transfinite.naac.program.Program;
import one.transfinite.naac.publication.BookPublication;
import one.transfinite.naac.publication.PaperPresented;
import one.transfinite.naac.publication.ResearchPublication;
import one.transfinite.naac.qualification.EntranceQualification;
import one.transfinite.naac.qualification.PGQualification;
import one.transfinite.naac.qualification.ResearchQualification;
import one.transfinite.naac.qualification.UGQualification;
import one.transfinite.naac.role.Role;
import one.transfinite.naac.role.RoleName;
import one.transfinite.naac.student.AdmittedStudent;
import one.transfinite.naac.student.Student;
import one.transfinite.naac.teacher.Teacher;
import one.transfinite.naac.teacher.TeacherAppointment;
import one.transfinite.naac.teacher.TeacherApproval;
import one.transfinite.naac.teacher.TeacherTransfer;
import one.transfinite.naac.user.User;
import org.junit.jupiter.api.Test;

class AllottedMarkTest {
    @Test
    void testConstructor() {
        AllottedMark actualAllottedMark = new AllottedMark();
        Department department = new Department();
        department.setId(123L);
        department.setDepartmentName("Department Name");
        department.setPrograms(new ArrayList<Program>());
        department.setEstablishmentYear("Establishment Year");
        Program program = new Program();
        program.setProgramCode("Program Code");
        program.setProgramName("Program Name");
        program.setCourses(new ArrayList<Course>());
        program.setProgramId(123L);
        program.setStartYear("Start Year");
        program.setAdmittedStudents(new ArrayList<AdmittedStudent>());
        program.setDepartment(department);
        program.setProgramType("Program Type");
        Course course = new Course();
        course.setProgram(program);
        course.setSemester("Semester");
        course.setElective(true);
        course.setYear("Year");
        course.setCbcs(true);
        course.setCode("Code");
        course.setName("Name");
        course.setYoi("Yoi");
        course.setProgramId(123L);
        actualAllottedMark.setCourse(course);
        actualAllottedMark.setId(123L);
        actualAllottedMark.setMark(1L);
        Department department1 = new Department();
        department1.setId(123L);
        department1.setDepartmentName("Department Name");
        department1.setPrograms(new ArrayList<Program>());
        department1.setEstablishmentYear("Establishment Year");
        Program program1 = new Program();
        program1.setProgramCode("Program Code");
        program1.setProgramName("Program Name");
        program1.setCourses(new ArrayList<Course>());
        program1.setProgramId(123L);
        program1.setStartYear("Start Year");
        program1.setAdmittedStudents(new ArrayList<AdmittedStudent>());
        program1.setDepartment(department1);
        program1.setProgramType("Program Type");
        Hod hod = new Hod();
        hod.setResearchQualification(new ResearchQualification());
        hod.setUser(new User());
        hod.setTeacherApprovals(new ArrayList<TeacherApproval>());
        hod.setEntranceQualification(new EntranceQualification());
        hod.setPanDocument("Pan Document");
        hod.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        hod.setBookPublications(new ArrayList<BookPublication>());
        hod.setResearchPublications(new ArrayList<ResearchPublication>());
        hod.setPaperPresentedList(new ArrayList<PaperPresented>());
        hod.setAadharDocument("Aadhar Document");
        hod.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        hod.setId(123L);
        hod.setUgQualification(new UGQualification());
        hod.setPanNumber("42");
        hod.setAadharNumber("42");
        hod.setPgQualification(new PGQualification());
        Role role = new Role();
        role.setRoleName(RoleName.Admin);
        role.setId(123L);
        Teacher teacher = new Teacher();
        teacher.setResearchQualification(new ResearchQualification());
        teacher.setFacultyPrograms(new ArrayList<FacultyProgram>());
        teacher.setUser(new User());
        teacher.setTeacherApprovals(new ArrayList<TeacherApproval>());
        teacher.setEntranceQualification(new EntranceQualification());
        teacher.setPanDocument("Pan Document");
        teacher.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        teacher.setBookPublications(new ArrayList<BookPublication>());
        teacher.setResearchPublications(new ArrayList<ResearchPublication>());
        teacher.setTeacherId(123L);
        teacher.setPaperPresentedList(new ArrayList<PaperPresented>());
        teacher.setAadharDocument("Aadhar Document");
        teacher.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        teacher.setUgQualification(new UGQualification());
        teacher.setPanNumber("42");
        teacher.setAadharNumber("42");
        teacher.setFacultySeminars(new ArrayList<FacultySeminar>());
        teacher.setPgQualification(new PGQualification());
        Student student = new Student();
        student.setProgram(new Program());
        student.setFatherName("Father Name");
        student.setReligion("Religion");
        student.setUser(new User());
        student.setPanDocument("Pan Document");
        student.setTenthMarks(10.0);
        student.setTwelthMarks(10.0);
        student.setStudentId(123L);
        student.setMotherName("Mother Name");
        student.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult = LocalDate.of(1970, 1, 1).atStartOfDay();
        student.setStartDate(Date.from(atStartOfDayResult.atZone(ZoneId.of("UTC")).toInstant()));
        student.setAadharDocument("Aadhar Document");
        student.setPanNumber("42");
        student.setAadharNumber("42");
        LocalDateTime atStartOfDayResult1 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student.setCompletionDate(Date.from(atStartOfDayResult1.atZone(ZoneId.of("UTC")).toInstant()));
        student.setMotherPhoneNumber("4105551212");
        student.setCast("Cast");
        User user = new User();
        user.setLastName("Doe");
        user.setEmail("jane.doe@example.org");
        user.setPassword("iloveyou");
        user.setHod(hod);
        user.setRole(role);
        user.setUserId(123L);
        LocalDateTime atStartOfDayResult2 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user.setCreatedAt(Date.from(atStartOfDayResult2.atZone(ZoneId.of("UTC")).toInstant()));
        user.setMiddleName("Middle Name");
        user.setFirstName("Jane");
        LocalDateTime atStartOfDayResult3 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user.setDob(Date.from(atStartOfDayResult3.atZone(ZoneId.of("UTC")).toInstant()));
        user.setTeacher(teacher);
        user.setGender("Gender");
        user.setStudent(student);
        user.setPhone("4105551212");
        Student student1 = new Student();
        student1.setProgram(program1);
        student1.setFatherName("Father Name");
        student1.setReligion("Religion");
        student1.setUser(user);
        student1.setPanDocument("Pan Document");
        student1.setTenthMarks(10.0);
        student1.setTwelthMarks(10.0);
        student1.setStudentId(123L);
        student1.setMotherName("Mother Name");
        student1.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult4 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student1.setStartDate(Date.from(atStartOfDayResult4.atZone(ZoneId.of("UTC")).toInstant()));
        student1.setAadharDocument("Aadhar Document");
        student1.setPanNumber("42");
        student1.setAadharNumber("42");
        LocalDateTime atStartOfDayResult5 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student1.setCompletionDate(Date.from(atStartOfDayResult5.atZone(ZoneId.of("UTC")).toInstant()));
        student1.setMotherPhoneNumber("4105551212");
        student1.setCast("Cast");
        StudentCourseMapping studentCourseMapping = new StudentCourseMapping();
        studentCourseMapping.setAllottedMarks(new ArrayList<AllottedMark>());
        studentCourseMapping.setId(123L);
        studentCourseMapping.setStudent(student1);
        actualAllottedMark.setStudentCourseMapping(studentCourseMapping);
        assertSame(course, actualAllottedMark.getCourse());
        assertEquals(123L, actualAllottedMark.getId().longValue());
        assertEquals(1L, actualAllottedMark.getMark().longValue());
        assertSame(studentCourseMapping, actualAllottedMark.getStudentCourseMapping());
    }

    @Test
    void testConstructor2() {
        StudentCourseMapping studentCourseMapping = new StudentCourseMapping();
        AllottedMark actualAllottedMark = new AllottedMark(123L, studentCourseMapping, new Course(), 1L);
        Department department = new Department();
        department.setId(123L);
        department.setDepartmentName("Department Name");
        department.setPrograms(new ArrayList<Program>());
        department.setEstablishmentYear("Establishment Year");
        Program program = new Program();
        program.setProgramCode("Program Code");
        program.setProgramName("Program Name");
        program.setCourses(new ArrayList<Course>());
        program.setProgramId(123L);
        program.setStartYear("Start Year");
        program.setAdmittedStudents(new ArrayList<AdmittedStudent>());
        program.setDepartment(department);
        program.setProgramType("Program Type");
        Course course = new Course();
        course.setProgram(program);
        course.setSemester("Semester");
        course.setElective(true);
        course.setYear("Year");
        course.setCbcs(true);
        course.setCode("Code");
        course.setName("Name");
        course.setYoi("Yoi");
        course.setProgramId(123L);
        actualAllottedMark.setCourse(course);
        actualAllottedMark.setId(123L);
        actualAllottedMark.setMark(1L);
        Department department1 = new Department();
        department1.setId(123L);
        department1.setDepartmentName("Department Name");
        department1.setPrograms(new ArrayList<Program>());
        department1.setEstablishmentYear("Establishment Year");
        Program program1 = new Program();
        program1.setProgramCode("Program Code");
        program1.setProgramName("Program Name");
        program1.setCourses(new ArrayList<Course>());
        program1.setProgramId(123L);
        program1.setStartYear("Start Year");
        program1.setAdmittedStudents(new ArrayList<AdmittedStudent>());
        program1.setDepartment(department1);
        program1.setProgramType("Program Type");
        Hod hod = new Hod();
        hod.setResearchQualification(new ResearchQualification());
        hod.setUser(new User());
        hod.setTeacherApprovals(new ArrayList<TeacherApproval>());
        hod.setEntranceQualification(new EntranceQualification());
        hod.setPanDocument("Pan Document");
        hod.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        hod.setBookPublications(new ArrayList<BookPublication>());
        hod.setResearchPublications(new ArrayList<ResearchPublication>());
        hod.setPaperPresentedList(new ArrayList<PaperPresented>());
        hod.setAadharDocument("Aadhar Document");
        hod.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        hod.setId(123L);
        hod.setUgQualification(new UGQualification());
        hod.setPanNumber("42");
        hod.setAadharNumber("42");
        hod.setPgQualification(new PGQualification());
        Role role = new Role();
        role.setRoleName(RoleName.Admin);
        role.setId(123L);
        Teacher teacher = new Teacher();
        teacher.setResearchQualification(new ResearchQualification());
        teacher.setFacultyPrograms(new ArrayList<FacultyProgram>());
        teacher.setUser(new User());
        teacher.setTeacherApprovals(new ArrayList<TeacherApproval>());
        teacher.setEntranceQualification(new EntranceQualification());
        teacher.setPanDocument("Pan Document");
        teacher.setTeacherTransfers(new ArrayList<TeacherTransfer>());
        teacher.setBookPublications(new ArrayList<BookPublication>());
        teacher.setResearchPublications(new ArrayList<ResearchPublication>());
        teacher.setTeacherId(123L);
        teacher.setPaperPresentedList(new ArrayList<PaperPresented>());
        teacher.setAadharDocument("Aadhar Document");
        teacher.setTeacherAppointments(new ArrayList<TeacherAppointment>());
        teacher.setUgQualification(new UGQualification());
        teacher.setPanNumber("42");
        teacher.setAadharNumber("42");
        teacher.setFacultySeminars(new ArrayList<FacultySeminar>());
        teacher.setPgQualification(new PGQualification());
        Student student = new Student();
        student.setProgram(new Program());
        student.setFatherName("Father Name");
        student.setReligion("Religion");
        student.setUser(new User());
        student.setPanDocument("Pan Document");
        student.setTenthMarks(10.0);
        student.setTwelthMarks(10.0);
        student.setStudentId(123L);
        student.setMotherName("Mother Name");
        student.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult = LocalDate.of(1970, 1, 1).atStartOfDay();
        student.setStartDate(Date.from(atStartOfDayResult.atZone(ZoneId.of("UTC")).toInstant()));
        student.setAadharDocument("Aadhar Document");
        student.setPanNumber("42");
        student.setAadharNumber("42");
        LocalDateTime atStartOfDayResult1 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student.setCompletionDate(Date.from(atStartOfDayResult1.atZone(ZoneId.of("UTC")).toInstant()));
        student.setMotherPhoneNumber("4105551212");
        student.setCast("Cast");
        User user = new User();
        user.setLastName("Doe");
        user.setEmail("jane.doe@example.org");
        user.setPassword("iloveyou");
        user.setHod(hod);
        user.setRole(role);
        user.setUserId(123L);
        LocalDateTime atStartOfDayResult2 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user.setCreatedAt(Date.from(atStartOfDayResult2.atZone(ZoneId.of("UTC")).toInstant()));
        user.setMiddleName("Middle Name");
        user.setFirstName("Jane");
        LocalDateTime atStartOfDayResult3 = LocalDate.of(1970, 1, 1).atStartOfDay();
        user.setDob(Date.from(atStartOfDayResult3.atZone(ZoneId.of("UTC")).toInstant()));
        user.setTeacher(teacher);
        user.setGender("Gender");
        user.setStudent(student);
        user.setPhone("4105551212");
        Student student1 = new Student();
        student1.setProgram(program1);
        student1.setFatherName("Father Name");
        student1.setReligion("Religion");
        student1.setUser(user);
        student1.setPanDocument("Pan Document");
        student1.setTenthMarks(10.0);
        student1.setTwelthMarks(10.0);
        student1.setStudentId(123L);
        student1.setMotherName("Mother Name");
        student1.setFatherPhoneNumber("4105551212");
        LocalDateTime atStartOfDayResult4 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student1.setStartDate(Date.from(atStartOfDayResult4.atZone(ZoneId.of("UTC")).toInstant()));
        student1.setAadharDocument("Aadhar Document");
        student1.setPanNumber("42");
        student1.setAadharNumber("42");
        LocalDateTime atStartOfDayResult5 = LocalDate.of(1970, 1, 1).atStartOfDay();
        student1.setCompletionDate(Date.from(atStartOfDayResult5.atZone(ZoneId.of("UTC")).toInstant()));
        student1.setMotherPhoneNumber("4105551212");
        student1.setCast("Cast");
        StudentCourseMapping studentCourseMapping1 = new StudentCourseMapping();
        studentCourseMapping1.setAllottedMarks(new ArrayList<AllottedMark>());
        studentCourseMapping1.setId(123L);
        studentCourseMapping1.setStudent(student1);
        actualAllottedMark.setStudentCourseMapping(studentCourseMapping1);
        assertSame(course, actualAllottedMark.getCourse());
        assertEquals(123L, actualAllottedMark.getId().longValue());
        assertEquals(1L, actualAllottedMark.getMark().longValue());
        assertSame(studentCourseMapping1, actualAllottedMark.getStudentCourseMapping());
    }
}

